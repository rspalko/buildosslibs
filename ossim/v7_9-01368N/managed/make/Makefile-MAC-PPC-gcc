KDU_GLIBS =
# KDU_GLIBS += -static -static-libgcc # This option is for static builds, but
         # might be problematic on the MAC; use xcode for exotic configurations

CC = g++

# The following variables allow you to turn on/off SIMD optimizations
INCLUDE_ALTIVEC = 1 # Comment out to avoid ALTIVEC; value is not important

# You should not normally need to modify anything below
INCLUDES = -I../all_includes
INCLUDES += -I../../apps/client_server
INCLUDES += -I/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Headers
C_OPT = -O3 -DNDEBUG -Wall -Wno-overloaded-virtual $(CXXFLAGS)
C_OPT += $(KDU_GLIBS) -fPIC

#C_OPT += -mtune=G4  # Use this for a G4 build
C_OPT += -fast # Use this only for a G5 build
C_OPT += -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64 # Remove for 32-bit I/O
#C_OPT += -DKDU_CUSTOM_TEXT   # See "Internationalization" in "Compilation_Instructions.txt"

# File-specific compilation-directives follow; these are applied to functions
# whose invocation is constrained by run-time CPUID tests
ifdef INCLUDE_ALTIVEC
  C_OPT += -DKDU_ALTIVEC_GCC -faltivec
endif

CFLAGS = $(INCLUDES) $(C_OPT)

LIBS = -lm -lpthread # You may comment out "-lpthreads" if coresys was
                     # built using -DKDU_NO_THREADS
NETLIBS = 

BIN_DIR = ../../bin/Mac-PPC-gcc
LIB_DIR = ../../lib/Mac-PPC-gcc

STATIC_LIB_SRC = $(LIB_DIR)/libkdu.a
SHARED_LIB_SRC = $(LIB_DIR)/libkdu_v79R.so

LIB_SRC = $(STATIC_LIB_SRC)
LIB_IMPORTS =

AUX_STATIC_LIB_NAME = libkdu_aux.a
AUX_SHARED_LIB_NAME = libkdu_a79R.so

JNI_LIB_NAME = libkdu_jni.jnilib
JNI_LINK_FLAGS = 

all :: kdu_hyperdoc $(AUX_SHARED_LIB_NAME) $(JNI_LIB_NAME) $(AUX_STATIC_LIB_NAME)

include Targets.mk
