// -----------------------------------------------------------------
// This file is automatically generated by "kdu_text_extractor"
// Do not edit the file directly.  You may, however, use this file
// as a template for alternate versions in which the text strings
// are translated into different languages.
// -----------------------------------------------------------------
#include <kdu_messaging.h>

struct kdl_message_info{
  const char *context;
  kdu_uint32 id;
  const char *lead_in;
  const char *text;
};

static bool
  kdl_register_text(kdl_message_info *info, int num_records)
{
  for (; num_records > 0; num_records--, info++)
    kdu_customize_text(info->context,info->id,
                       info->lead_in,info->text);
  return true;
}

static kdl_message_info data[368] = {
  {
    "E(block_decoder.cpp)", 0,
    "Kakadu Core Error:\n",
    "Encountered incorrectly terminated codeword segment, or invalid SEGMARK symbol in code-block bit-stream.  You may like to use the \"resilient\" mode to recover from and conceal such errors.\0"
  },
  {
    "E(codestream.cpp)", 3,
    "Kakadu Core Error:\n",
    "PPM/PPT marker segments must be at least 3 bytes long!\0"
  },
  {
    "E(codestream.cpp)", 4,
    "Kakadu Core Error:\n",
    "Found multiple PPM/PPT marker segments with identical Zppt/Zppm indices within the same header scope (main or tile-part header)!\0"
  },
  {
    "E(codestream.cpp)", 5,
    "Kakadu Core Error:\n",
    "Insufficient packet header data in PPM marker segments!\0"
  },
  {
    "E(codestream.cpp)", 6,
    "Kakadu Core Error:\n",
    "Encountered malformed PPM marker: 4-byte Nppm values may not straddle multiple PPM marker segments.  Problem is most likely due to a previously incorrect Nppm value.\0"
  },
  {
    "E(codestream.cpp)", 7,
    "Kakadu Core Error:\n",
    "Insufficient packet header data in PPM marker segments, or else Nppm values must be incorrect!\0"
  },
  {
    "E(codestream.cpp)", 8,
    "Kakadu Core Error:\n",
    "Insufficient packet header data in PPM marker segments!\0"
  },
  {
    "E(codestream.cpp)", 9,
    "Kakadu Core Error:\n",
    "Insufficient packet header data in PPM marker segments, or else Nppm values must be incorrect!\0"
  },
  {
    "E(codestream.cpp)", 10,
    "Kakadu Core Error:\n",
    "Attempting to write TLM (tile-part length) data where at least one tile-part's length cannot be represented as an unsigned value with the precision identified via the `ORGtlm_style' parameter attribute -- or 32 bits if no such attribute was specified.\0"
  },
  {
    "E(codestream.cpp)", 12,
    "Kakadu Core Error:\n",
    "TLM marker segments must be at least 6 bytes long!\0"
  },
  {
    "E(codestream.cpp)", 13,
    "Kakadu Core Error:\n",
    "Found multiple TLM marker segments with identical Ztlm indices within the main header!\0"
  },
  {
    "E(codestream.cpp)", 14,
    "Kakadu Core Error:\n",
    "Illegal Stlm field encountered in TLM marker segment!\0"
  },
  {
    "E(codestream.cpp)", 15,
    "Kakadu Core Error:\n",
    "Malformed TLM marker segment encountered in main header.  Segment length is inconsistent with the number of bytes used to represent pointer info for each tile-part.\0"
  },
  {
    "E(codestream.cpp)", 16,
    "Kakadu Core Error:\n",
    "Illegal TLM marker segment data encountered in main header.  An illegal tile number has been identified, either explicitly or implicitly (through the rule that missing tile identifiers are legal only when tiles appear in order with only one tile-part each).\0"
  },
  {
    "E(codestream.cpp)", 17,
    "Kakadu Core Error:\n",
    "PLT marker segments appear out of order within one or more tile-part headers.  While this is not illegal, it is highly inadvisable since it prevents immediate condensation of the pointer information by efficient parsers.  To process this code-stream, you will have to open it again, with file seeking disabled.\0"
  },
  {
    "E(codestream.cpp)", 18,
    "Kakadu Core Error:\n",
    "There appears to be a problem with the PLT marker segments included in the input code-stream.  The PLT marker segments encountered so far do not have sufficient length information to describe the lengths of all packets in the tile-parts encountered so far.  To process this code-stream, you will have to open it again, with file seeking disabled.\0"
  },
  {
    "E(codestream.cpp)", 19,
    "Kakadu Core Error:\n",
    "Unexpected change in coding parameters or packet sequencing detected while parsing packet length information in PLT marker segments.  While this is not illegal, it is highly inadvisable.  To process this code-stream, open it again with file seeking disabled!\0"
  },
  {
    "E(codestream.cpp)", 20,
    "Kakadu Core Error:\n",
    "Malformed PLT marker segment encountered in tile-part header.  Segment terminates part of the way through a multi-byte packet length specification!\0"
  },
  {
    "E(codestream.cpp)", 21,
    "Kakadu Core Error:\n",
    "Unexpected change in coding parameters or packet sequencing detected after parsing packet length information in PLT marker segments.  While this is not illegal, it is highly inadvisable.  To process this code-stream, open it again with file seeking disabled!\0"
  },
  {
    "E(codestream.cpp)", 22,
    "Kakadu Core Error:\n",
    "Unexpectedly ran out of packet length information while processing tile-parts.  Most likely cause is that PLT marker segments are malformed, incomplete, or do not appear until after the packets whose lengths they describe.  All of these conditions are violations of the standard!\0"
  },
  {
    "E(codestream.cpp)", 23,
    "Kakadu Core Error:\n",
    "Tile-part holds some but not all the packets of a precinct for which PLT information is being used to extract precinct addresses for random access.  In particular, the current tile has its packets sequenced so that all packets of any given precinct appear consecutively and yet a tile-part boundary has been inserted between the packets of a precinct.  While this is not illegal, it indicates very poor judgement in the placement of tile-part boundaries.  To process this code-stream, you will have to open it again with file seeking disabled.\0"
  },
  {
    "E(codestream.cpp)", 24,
    "Kakadu Core Error:\n",
    "Supplied progression order attributes for tile  are insuffient to cover all packets for the tile!\0"
  },
  {
    "E(codestream.cpp)", 25,
    "Kakadu Core Error:\n",
    "Attempting to use a spatially progressive packet sequence where position order dominates component order. This is illegal when the component sub-sampling factors are not exact powers of 2!\0"
  },
  {
    "E(codestream.cpp)", 26,
    "Kakadu Core Error:\n",
    "Illegal canvas coordinates: the first tile is required to have a non-empty intersection with the image on the high resolution grid.\0"
  },
  {
    "E(codestream.cpp)", 27,
    "Kakadu Core Error:\n",
    "No information available concerning component sample bit-depths (i.e., sample precision).\0"
  },
  {
    "E(codestream.cpp)", 28,
    "Kakadu Core Error:\n",
    "No information available regarding whether components are signed or unsigned.\0"
  },
  {
    "E(codestream.cpp)", 29,
    "Kakadu Core Error:\n",
    "No information available concerning component sub-sampling factors.\0"
  },
  {
    "E(codestream.cpp)", 30,
    "Kakadu Core Error:\n",
    "Maximum number of allowable tiles is 65535 for any JPEG2000 code-stream.  You have managed to exceed this number!!\0"
  },
  {
    "E(codestream.cpp)", 35,
    "Kakadu Core Error:\n",
    "Main code-stream header appears corrupt!\0"
  },
  {
    "E(codestream.cpp)", 39,
    "Kakadu Core Error:\n",
    "Code-stream must start with an SOC marker!\0"
  },
  {
    "E(codestream.cpp)", 40,
    "Kakadu Core Error:\n",
    "Code-stream must contain a valid SIZ marker segment, immediately after the SOC marker!\0"
  },
  {
    "E(codestream.cpp)", 45,
    "Kakadu Core Error:\n",
    "Code-stream must start with an SOC marker!\0"
  },
  {
    "E(codestream.cpp)", 46,
    "Kakadu Core Error:\n",
    "Code-stream must contain a valid SIZ marker segment, immediately after the SOC marker!\0"
  },
  {
    "E(codestream.cpp)", 50,
    "Kakadu Core Error:\n",
    "Attempting to impose too small a limit on the number of code-stream bytes. \0"
  },
  {
    "E(codestream.cpp)", 60,
    "Kakadu Core Error:\n",
    "You have set the byte limit too low.  All compressed data would have to be discarded in the call to `kdu_codestream::trans_out'!\0"
  },
  {
    "E(codestream.cpp)", 17372675,
    "Kakadu Core Error:\n",
    "`Scbr' parameters do not result in flush-sets which all have the same size -- this invalidates the CBR channel model on which the `Scbr' low latency flushing process is based.  You may be receiving this error because image components have different dimensions and the `Cprecincts' and/or `Clevels' attributes have not been configured on a per-component basis to ensure that all components have identical natural flush-set boundaries; note that the `Scbr' attribute's first parameter V defines the flushing interval based on the 1st image component.\0"
  },
  {
    "E(codestream.cpp)", 29081601,
    "Kakadu Core Error:\n",
    "Max codestream size is too small to allow even for the overhead of empty J2K packets!\0"
  },
  {
    "E(codestream.cpp)", 67634432,
    "Kakadu Core Error:\n",
    "The `Mcomponents' parameter attribute must be assigned a non-zero value if and only if the `MCT' flag is present in the `Sextensions' attribute.\0"
  },
  {
    "E(codestream.cpp)", 101779456,
    "Kakadu Core Error:\n",
    "Custom DWT kernel found in ATK marker segment contains a ridiculously large number of coefficients!\0"
  },
  {
    "E(codestream.cpp)", 101779458,
    "Kakadu Core Error:\n",
    "Multi-component transform block identifies more input components or more output components than the maximum number of image components in a codestream.  Seems like an error!\0"
  },
  {
    "E(codestream.cpp)", 101779459,
    "Kakadu Core Error:\n",
    "Multi-component transform stage appears to have a ridiculous number of component inputs or outputs -- greater than 65535!  Treating this as an error.\0"
  },
  {
    "E(codestream.cpp)", 101779460,
    "Kakadu Core Error:\n",
    "Trying to create a `kdu_codestream' object with more than 16384 image components -- this is the maximum number allowed by the standard.\0"
  },
  {
    "E(codestream.cpp)", 118556672,
    "Kakadu Core Error:\n",
    "Number of multi-component transform output components defined by CBD marker segment exceeds the maximum allowed value of 16384.\0"
  },
  {
    "E(codestream.cpp)", 134743298,
    "Kakadu Core Error:\n",
    "Unable to access the description of stage \0"
    " (starting from 0) in the multi-component transform for some tile (or in the main header).  Either the `Mstages' attribute contains insufficient entries, or no `Mstage_collections' attribute exists with the instance identifier provided by `Mstages'.\0"
  },
  {
    "E(codestream.cpp)", 134743299,
    "Kakadu Core Error:\n",
    "Multi-component transform blocks must each have a strictly positive number of inputs and outputs, as identified by the `Mstage_collections' parameter attribute.\0"
  },
  {
    "E(codestream.cpp)", 134743300,
    "Kakadu Core Error:\n",
    "Unable to access the offset parameters identified by an `Mstage_xforms' parameter attribute.  Specifically, there should be an `Mvector_size' attribute, with instance index \0"
    " and value \0"
    ", corresponding to the number of output components produced by the multi-component transform block in question.\0"
  },
  {
    "E(codestream.cpp)", 134743301,
    "Kakadu Core Error:\n",
    "Except for irreversible matrix-based decorrelation transforms, all multi-component transform blocks described by the `Mstage_collections' and `Mstage_xforms' parameter attributes must produce exactly one output component for each of their input components.\0"
  },
  {
    "E(codestream.cpp)", 134743302,
    "Kakadu Core Error:\n",
    "Unable to access the matrix parameters identified by an `Mstage_xforms' parameter attribute.  Specifically, there should be an `Mmatrix_size' attribute, with instance index \0"
    " and value \0"
    ", corresponding to the total number of coefficients required to describe the irreversible decorrelation transform or reversible SERM transform in question -- note that reversible transforms are described by M*(M+1) coefficients, where M is the number of input (or output) components.\0"
  },
  {
    "E(codestream.cpp)", 134743303,
    "Kakadu Core Error:\n",
    "Unable to access the matrix parameters identified by an `Mstage_xforms' parameter attribute.  Specifically, there should be an `Mtriang_size' attribute, with instance index \0"
    " and value \0"
    ", corresponding to the total number of coefficients in the lower triangular matrix which describes the dependency transform in question.  For irreversible dependency transforms, the matrix should not contain any diagonal entries.  For reversible dependency transforms, however, all but the first diagonal entries should also be included, as normalization factors for the integer predictors.\0"
  },
  {
    "E(codestream.cpp)", 134813185,
    "Kakadu Core Error:\n",
    "Unable to generate sufficient fill bytes to avoid buffer underflow with `Scbr' attribute present without overflowing the buffer -- you must increase the maximum buffer size, as supplied via the `Scbr' attribute.\0"
  },
  {
    "E(codestream.cpp)", 151520512,
    "Kakadu Core Error:\n",
    "Multi-component transform stage contains multiple transform blocks which provide different definitions for the same stage output component.\0"
  },
  {
    "E(codestream.cpp)", 151520513,
    "Kakadu Core Error:\n",
    "Multi-component transform does not satisfy the constraints imposed by Part 2 of the JPEG2000 standard.  The first transform stage must touch every codestream image component (no more and no less), while subsequent stages must touch every component produced by the previous stage.\0"
  },
  {
    "E(codestream.cpp)", 151520514,
    "Kakadu Core Error:\n",
    "The last stage of the multi-component transform may not produce more output components than the number specified in the CBD marker segment (i.e. the `Mcomponents' value).\0"
  },
  {
    "E(codestream.cpp)", 151520515,
    "Kakadu Core Error:\n",
    "Although not strictly illegal, the present Part-2 codestream contains insufficient information to determine the dimensions of all image components output by the multi-component transform, based on main header marker segments.  The fact that this is not illegal is almost certainly an oversight in the development of the Part-2 syntax, but Kakadu cannot work with such codestreams.\0"
  },
  {
    "E(codestream.cpp)", 370215169,
    "Kakadu Core Error:\n",
    "Insufficient input ranges supplied with`Mstage_inputs' codestream attribute to accommodate the dimensions supplied by an `Mstage_collections' attribute.\0"
  },
  {
    "E(codestream.cpp)", 370215170,
    "Kakadu Core Error:\n",
    "Insufficient output ranges supplied with`Mstage_inputs' codestream attribute to accommodate the dimensions supplied by an `Mstage_collections' attribute.\0"
  },
  {
    "E(codestream.cpp)", 554701574,
    "Kakadu Core Error:\n",
    "Memory allocation failure in sub-system\0"
    "with message:\0"
  },
  {
    "E(codestream.cpp)", 570754304,
    "Kakadu Core Error:\n",
    "Unable to find ATK marker segment referenced from within an COD/COC or MCC marker segment.\0"
  },
  {
    "E(codestream.cpp)", 587732481,
    "Kakadu Core Error:\n",
    "The V and Bmax parameters supplied with the `Scbr' attribute must both be positive integers.\0"
  },
  {
    "E(codestream.cpp)", 587797249,
    "Kakadu Core Error:\n",
    "One or more 32-bit fields within the SIZ marker segment is greater than or equal to 2^31.  This is legal, but this version of Kakadu expects all codestream dimensions (including tile dimensions) to be positive, when interpreted as 32-bit signed integers.  If this proves to be a practical limitation, the restriction may be removed in the future.\0"
  },
  {
    "E(codestream.cpp)", 604509697,
    "Kakadu Core Error:\n",
    "The `Scbr' option is not currently compatible with the generation of more than one sized quality layer.\0"
  },
  {
    "E(codestream.cpp)", 604509698,
    "Kakadu Core Error:\n",
    "The `Scbr' option can only be used when a non-zero target codestream length (bytes) is supplied to one or another of the flush functions.  You might have forgotten to supply a `-rate' argument to the compression tool, or the supplied or derived codestream length may be too small to accommodate even the main header.\0"
  },
  {
    "E(codestream.cpp)", 604509699,
    "Kakadu Core Error:\n",
    "The `Scbr' option requires you to supply a sequential target device for the generated codestream.\0"
  },
  {
    "E(codestream.cpp)", 604509700,
    "Kakadu Core Error:\n",
    "The `Scbr' option is not compatible with fragmented compression.\0"
  },
  {
    "E(codestream.cpp)", 604509701,
    "Kakadu Core Error:\n",
    "The Bmax (second) parameter supplied with `Scbr' is way too small!  Not large enough to accommodate even the main codestream header, which is part of the initial content of the \"leaky bucket\" that forms part of the CBR channel model.\0"
  },
  {
    "E(codestream.cpp)", 604509702,
    "Kakadu Core Error:\n",
    "The `Scbr' option may only be used in connection with the `Corder_PCRL' packet progression order.\0"
  },
  {
    "E(codestream.cpp)", 604509703,
    "Kakadu Core Error:\n",
    "The `Scbr' option may not be used together with `ORGgen_plt' or `ORGtparts' options.\0"
  },
  {
    "E(codestream.cpp)", 604509704,
    "Kakadu Core Error:\n",
    "Unsupported combination of `Scbr' attribute with horizontal tiling.  For simplicity, we currently do not allow this, although it could be supported if there were a good reason to do so in the future.\0"
  },
  {
    "E(codestream.cpp)", 621023233,
    "Kakadu Core Error:\n",
    "Attempting to write TLM (tile-part length) data using the \"implied\" tile-numbering style, as specified via the `ORGtlm_style' parameter attribute.  However, this requires tiles to be written in lexicographic order, which is not what's happening!\0"
  },
  {
    "E(codestream.cpp)", 621023234,
    "Kakadu Core Error:\n",
    "The \"implied\" style for signalling tile numbers in TLM marker segments, as requested via the \"ORGtlm_style\" parameter attribute, cannot be used unless there is only one tile-part per tile, so the \"ORGgen_tlm\" parameter attribute should specify a value of 1 for the maximum number of tile-parts per tile in this case.\0"
  },
  {
    "E(codestream.cpp)", 621023235,
    "Kakadu Core Error:\n",
    "You have used the \"ORGtlm_style\" parameter attribute to specify a TLM marker segment style in which tile numbers are represented using only one byte.  However, the number of tiles in the image is greater than 256, so this is clearly going to be a problem.\0"
  },
  {
    "E(codestream.cpp)", 638064129,
    "Kakadu Core Error:\n",
    "`ORGgen_tlm' behaviour is not currently supported with the CBR flushing option identified by `Scbr'.\0"
  },
  {
    "E(codestream.cpp)", 654841345,
    "Kakadu Core Error:\n",
    "The `Clayers' attribute must be exactly 1 when using the `Scbr' low latency CBR flushing option.\0"
  },
  {
    "E(codestream.cpp)", 688395778,
    "Kakadu Core Error:\n",
    "Unsupported combination of `Scbr' attribute with vertical tiling.  Currently, we allow vertical tiling only if each flush set spans an entire tile, but your flush sets are smaller than this, while you have multiple vertical tiles.  This combination might be supported in the future, but it requires tile lengths to be predicted exactly, so that the tile-part header can be written before the content that is to be written to the tile-part body is even available.  To predict flushed content length exactly requires us to be able to use fill/spacer bytes with absolute precision, which may occasionally require complex packet header manipulations.  Although these are possible, introducing them does not currently appear to have much real practical value.\0"
  },
  {
    "E(codestream.cpp)", 688395779,
    "Kakadu Core Error:\n",
    "Leaky bucket max size supplied via `Scbr' attribute is too small to allow reliable flushing of content to a constant bit-rate channel that neither overflows nor underflows.\0"
  },
  {
    "E(codestream.cpp)", 688395780,
    "Kakadu Core Error:\n",
    "A ridiculously large number of fill bytes are required to meet the CBR (constant bit-rate) codestream flushing objective associated with the `Scbr' parameter attribute.  To resolve this problem, you may need to decrease the target code-stream size.\0"
  },
  {
    "E(codestream.cpp)", 688395781,
    "Kakadu Core Error:\n",
    "Max codestream size is too small to accommodate the `Scbr' constant-bit-rate codestream flushing constraints!\0"
  },
  {
    "E(compressed.cpp)", 0,
    "Kakadu Core Error:\n",
    "Coding partitions (code-blocks and precinct partitions) must have origin coordinates equal to 1 or 0 only!\0"
  },
  {
    "E(compressed.cpp)", 1,
    "Kakadu Core Error:\n",
    "Coding partitions (namely, code-block and precinct partitions) must have exact power-of-2 dimensions!\0"
  },
  {
    "E(compressed.cpp)", 2,
    "Kakadu Core Error:\n",
    "Tile-components which are compressed using the irreversible processing path must have quantization parameters specified in the QCD/QCC marker segments, either explicitly, or through implicit derivation from the quantization parameters for the LL subband, as explained in the JPEG2000 standard, ISO/IEC 15444-1.  The present set of code-stream parameters is not legal.\0"
  },
  {
    "E(compressed.cpp)", 4,
    "Kakadu Core Error:\n",
    "Illegal colour transform specified when image has insufficient or incompatible colour components.\0"
  },
  {
    "E(compressed.cpp)", 6,
    "Kakadu Core Error:\n",
    "You cannot use PPM or PPT marker segments (packed packet headers) with cached compressed data sources.\0"
  },
  {
    "E(compressed.cpp)", 7,
    "Kakadu Core Error:\n",
    "Found non-marker code while parsing tile header marker segments.  Chances are that a marker segment length field is incorrect!\0"
  },
  {
    "E(compressed.cpp)", 8,
    "Kakadu Core Error:\n",
    "Invalid marker code found in code-stream!\n\0"
    "\tExpected SOT marker and got \0"
  },
  {
    "E(compressed.cpp)", 9,
    "Kakadu Core Error:\n",
    "Corrupt SOT marker segment found in codestream: tile-number lies outside the range of available tiles derived from the SIZ marker segment.\0"
  },
  {
    "E(compressed.cpp)", 10,
    "Kakadu Core Error:\n",
    "Missing or out-of-sequence tile-parts for tile number \0"
    " in code-stream!\0"
  },
  {
    "E(compressed.cpp)", 11,
    "Kakadu Core Error:\n",
    "The number of tile-parts for tile number \0"
    " is identified by different non-zero values in different SOT markers for the tile!\0"
  },
  {
    "E(compressed.cpp)", 12,
    "Kakadu Core Error:\n",
    "Found non-marker code while looking for SOD marker to terminate a tile-part header.  Chances are that a marker segment length field is incorrect!\0"
  },
  {
    "E(compressed.cpp)", 13,
    "Kakadu Core Error:\n",
    "Use of both PPM and PPT marker segments is illegal!\0"
  },
  {
    "E(compressed.cpp)", 14,
    "Kakadu Core Error:\n",
    "Too many tile-parts for tile \0"
    ".  No tile may have more than 255 parts.  This problem can usually be managed via the `ORGtparts' and/or `ORGtpart_interrupts' parameter attributes.\0"
  },
  {
    "E(compressed.cpp)", 15,
    "Kakadu Core Error:\n",
    "Too many tile-parts for tile \0"
    ".  The maximum number of tile-parts per tile has been fixed by the `ORGgen_tlm' parameter attribute to \0"
    ".  It may be that extra tile-parts are being generated by incremental flushing procedures, which can be hard to predict; however, you can bound the impact of incremental flushing via the `ORGtpart_interrupts' parameter attribute.\0"
  },
  {
    "E(compressed.cpp)", 16,
    "Kakadu Core Error:\n",
    "Attempting to generate tile-part data without first determining packet lengths.  This may be a consequence of incomplete simulation of the packet construction process.\0"
  },
  {
    "E(compressed.cpp)", 17,
    "Kakadu Core Error:\n",
    "Cannot satisfy the request to generate PLT marker segments!  There are so many packets in one tile-part that it is beyond the capacity of the maximum 256 marker segments to represent length information for all tile-parts!!\0"
  },
  {
    "E(compressed.cpp)", 18,
    "Kakadu Core Error:\n",
    "Length of current tile-part exceeds the maximum value which can be represented by the 32-bit length field in the SOT marker!  You will have to split the code-stream into smaller tile-parts -- see the \"ORGtparts\" parameter attribute.\0"
  },
  {
    "E(compressed.cpp)", 25,
    "Kakadu Core Error:\n",
    "Out-of-sequence SOP marker found while attempting to read a packet from the code-stream!\n\0"
    "\tFound sequence number \0"
    ", but expected \0"
    "Use the resilient option if you would like to try to recover from this error.\0"
  },
  {
    "E(compressed.cpp)", 26,
    "Kakadu Core Error:\n",
    "Illegal marker code found while attempting to read a packet from the code-stream!\n\0"
    "\tIllegal marker code is \0"
    "Use the resilient option if you would like to try to recover from this error.\0"
  },
  {
    "E(compressed.cpp)", 27,
    "Kakadu Core Error:\n",
    "Exhausted PPM/PPT marker segment data while attempting to parse a packet header!\0"
  },
  {
    "E(compressed.cpp)", 28,
    "Kakadu Core Error:\n",
    "Packet header contains a representation which is not strictly illegal, but unreasonably large so that it exceeds the dynamic range available for our internal representation!  The problem is most likely due to a corrupt or incorrectly constructed code-stream.  Try re-opening the image with the resilient mode enabled.\0"
  },
  {
    "E(compressed.cpp)", 29,
    "Kakadu Core Error:\n",
    "Illegal inclusion tag tree encountered while decoding a packet header.  This problem can arise if empty packets are used (i.e., packets whose first header bit is 0) and the value coded by the inclusion tag tree in a subsequent packet is not exactly equal to the index of the quality layer in which each code-block makes its first contribution.  Such an error may arise from a mis-interpretation of the standard.  The problem may also occur as a result of a corrupted code-stream.  Try re-opening the image with the resilient mode enabled.\0"
  },
  {
    "E(compressed.cpp)", 30,
    "Kakadu Core Error:\n",
    "Illegal number of missing MSB's signalled in corrupted tag tree.  The value may not exceed 74 in any practical code-stream or any legal code-stream which is consistent with profile 0 or profile 1.  Try re-opening the image with the resilient mode enabled.\0"
  },
  {
    "E(compressed.cpp)", 31,
    "Kakadu Core Error:\n",
    "Illegal marker code, \0"
    ", found while reading packet header.  Try re-opening the image with the resilient mode enabled.\0"
  },
  {
    "E(compressed.cpp)", 32,
    "Kakadu Core Error:\n",
    "Exhausted PPM/PPT marker segment data while attempting to parse a packet header!\0"
  },
  {
    "E(compressed.cpp)", 33,
    "Kakadu Core Error:\n",
    "Expected to find EPH marker following packet header.  Found \0"
    " instead.\0"
  },
  {
    "E(compressed.cpp)", 34,
    "Kakadu Core Error:\n",
    "Illegal marker code, \0"
    ", found while reading packet body.  Try re-opening the image with the resilient mode enabled.\0"
  },
  {
    "E(compressed.cpp)", 35,
    "Kakadu Core Error:\n",
    "Packet body terminated with an FF!\0"
  },
  {
    "E(compressed.cpp)", 36,
    "Kakadu Core Error:\n",
    "Encountered a corrupted packet while using packet length information to access the compressed data source in a random access fashion.  To process corrupted code-streams in an error resilient manner, you must disable seeking on the compressed data source (i.e., force sequential access) as well as enabling the resilient parsing mode.\0"
  },
  {
    "E(compressed.cpp)", 83953409,
    "Kakadu Core Error:\n",
    "Tile-components which are compressed using the irreversible processing path must have quantization parameters specified in the QCD/QCC marker segments, either explicitly, or through implicit derivation from the quantization parameters for the LL subband, as explained in the JPEG2000 standard, ISO/IEC 15444-1.  The present set of code-stream parameters is not legal.\0"
  },
  {
    "E(compressed.cpp)", 118556673,
    "Kakadu Core Error:\n",
    "Tile-component-resolution encountered in the codestream contains way too many precincts!!!  The value calculated from codestream parameters exceeds (2^30) which means that even the storage required to keep a status pointer for each precinct will exceed the memory on most machines.\0"
  },
  {
    "E(compressed.cpp)", 118556674,
    "Kakadu Core Error:\n",
    "Tile-component-resolution encountered in the codestream contains way too many precincts!!!  The value calculated from codestream parameters exceeds (2^30) which means that even the storage required to keep a status pointer for each precinct will exceed the memory on most machines.\0"
  },
  {
    "E(compressed.cpp)", 369235460,
    "Kakadu Core Error:\n",
    "Missing or invalid coding parameter attribute.  You are probably receiving this error when trying to parse or decode a codestream with missing or invalid marker segments in the main or tile-part headers.\0"
  },
  {
    "E(compressed.cpp)", 554701569,
    "Kakadu Core Error:\n",
    "Invalid downsampling factor structure; codestream appears to be seriously corrupted.\0"
  },
  {
    "E(compressed.cpp)", 554701570,
    "Kakadu Core Error:\n",
    "Invalid number of DWT levels for tile-component!  The JPEG2000 standard permits no more than 32 DWT levels, which is already enormous!  Codestream is likely corrupt.\0"
  },
  {
    "E(compressed.cpp)", 587797252,
    "Kakadu Core Error:\n",
    "Failed to find all relevant coding parameter attributes: Clevels, Creversible, Ckernels, Cuse_precincts, Cblk, Cmodes and Catk.  Perhaps there are no COD marker segments??\0"
  },
  {
    "E(compressed.cpp)", 621085953,
    "Kakadu Core Error:\n",
    "Precinct partition dimensions too small!  Must not be so small that the induced code-block partition becomes smaller than 1 sample wide or 1 sample high within any subband.\0"
  },
  {
    "E(decoder.cpp)", 0,
    "Kakadu Core Error:\n",
    "Insufficient implementation precision available for true reversible processing!\0"
  },
  {
    "E(encoder.cpp)", 1,
    "Kakadu Core Error:\n",
    "Insufficient implementation precision available for true reversible compression!\0"
  },
  {
    "E(encoder.cpp)", 2,
    "Kakadu Core Error:\n",
    "You have selected too small a value for the ROI up-shift parameter.  The up-shift should be at least as large as the largest number of magnitude bit-planes in any subband; otherwise, the foreground and background regions might not be properly distinguished by the decompressor.\0"
  },
  {
    "E(kernels.cpp)", 0,
    "Kakadu Core Error:\n",
    "The W9X7 kernel may not be used for reversible compression!\0"
  },
  {
    "E(multi_transform.cpp)", 570950912,
    "Kakadu Core Error:\n",
    "Part-2 codestream declares a codestream component to have a different bit-depth (Sprecision) to the output component (Mprecision) with which it is directly associated.  While this is allowed, it makes very little sense, and Kakadu will not perform the required multiple scaling for irreversibly transformed components.\0"
  },
  {
    "E(multi_transform.cpp)", 587728129,
    "Kakadu Core Error:\n",
    "Cannot implement multi-component transform.  It seems that one or more transform steps require image samples to be treated as reversible, where other steps require the same image samples to be treated as irreversible.  This is illegal in Part-1 of the JPEG2000 standard.  Although Part-2 is not clear on the matter, Kakadu's implementation insists only that irreversibly compressed samples not be subjected to reversible multi-component transform processing during decompression -- this is eminently reasonable, since exact reversible processing of data which is not already exactly defined, makes no sense.  The reverse case, in which reversibly compressed data is processed using an irreversible multi-component transform, can make sense, particularly where there are multiple ways to render the same original reversibly compressed codestream components to MCT outputs.\0"
  },
  {
    "E(multi_transform.cpp)", 587793664,
    "Kakadu Core Error:\n",
    "Multi-component reversible dependency transforms must have exact positive powers of 2 on the diagonal of their triangular coefficient matrix; these are the divisors used to scale and round the prediction terms.  The offending divisor is \0"
  },
  {
    "E(multi_transform.cpp)", 587793665,
    "Kakadu Core Error:\n",
    "Multi-component reversible decorrelation transforms must have exact positive powers of 2 for the divisors which are used to scale and round the update terms.  The offending divisor is \0"
  },
  {
    "E(multi_transform.cpp)", 587793666,
    "Kakadu Core Error:\n",
    "Multi-component reversible decorrelation transforms must have exact positive powers of 2 for the divisors which are used to scale and round the update terms.  The offending divisor is \0"
  },
  {
    "E(multi_transform.cpp)", 587793667,
    "Kakadu Core Error:\n",
    "Multi-component reversible dependency transforms must have exact positive powers of 2 on the diagonal of their triangular coefficient matrix; these are the divisors used to scale and round the prediction terms.  The offending divisor is \0"
  },
  {
    "E(multi_transform.cpp)", 621282560,
    "Kakadu Core Error:\n",
    "Cannot implement multi-component transform.  It seems that image components which must be processed by a common transform block (or decorrelating colour transform) have incompatible dimensions.  This error may also be detected if the sub-sampling factors associated with an MCT output image component vary from tile to tile or if relative component size change from resolution level to resolution level (due to incompatible Part-2 downsampling factor style usage).  While these latter conditions might not be strictly illegal, they are clearly foolish.\0"
  },
  {
    "E(multi_transform.cpp)", 638059777,
    "Kakadu Core Error:\n",
    "Cannot perform forward multi-component transform based on the source image components supplied.  The multi-component transform is defined from the perspective of decompression (i.e., synthesis, or inverse transformation).  Not all of the defined transform blocks may be invertible.  Also, if the defined transform blocks do not use all codestream components to produce final output image components during decompression, it will not be possible to work back from the final image components to codestream components which can be subjected to spatial wavelet transformation and coding.  One of these conditions has been encountered with the configuration you are targeting during compression.\0"
    "  The following additional explanation is available ---- \0"
  },
  {
    "E(multi_transform.cpp)", 671679744,
    "Kakadu Core Error:\n",
    "Inconsistent bit-depths encountered amongst output image components produced by a DWT transform block embedded inside the multi-component transform network.  All output (i.e., synthesized) components produced by a single DWT block must be declared with the same bit-depth.  Anything else makes no sense, so Kakadu does not bother trying to accommodate this case.\0"
  },
  {
    "E(params.cpp)", 40,
    "Kakadu Core Error:\n",
    "Malformed attribute string\0"
    "White space characters are illegal!\0"
  },
  {
    "E(params.cpp)", 41,
    "Kakadu Core Error:\n",
    "Attribute\0"
    "is missing parameters:\n\n\t\0"
    "\nParameter values must be separated from the attribute name and optional location specifiers by an '=' sign!\n\0"
  },
  {
    "E(params.cpp)", 42,
    "Kakadu Core Error:\n",
    "Malformed location specifier encountered in attribute string\0"
    "Tile specifiers following the the colon must have the form \"T<num>\", while component specifiers must have the form \"C<num>\" and index specifiers must have the form \"I<num>\". There may be at most one of each!\0"
  },
  {
    "E(params.cpp)", 43,
    "Kakadu Core Error:\n",
    "Attribute string\0"
    "refers to a non-existent tile-component!\0"
  },
  {
    "E(params.cpp)", 45,
    "Kakadu Core Error:\n",
    "Attempt to set a non-tile-specific code-stream attribute in a specific component!\nProblem occurred while parsing the attribute string\0"
  },
  {
    "E(params.cpp)", 46,
    "Kakadu Core Error:\n",
    "Malformed attribute string\0"
    "Parameter values must be separated from the attribute name and optional location specifiers by an '=' sign!\0"
  },
  {
    "E(params.cpp)", 47,
    "Kakadu Core Error:\n",
    "The supplied attribute string\0"
    "refers to code-stream parameters which have already been parsed out of some string.  Moreover, multiple instances of this attribute are not permitted here!\0"
  },
  {
    "E(params.cpp)", 48,
    "Kakadu Core Error:\n",
    "Malformed attribute string\0"
    "Problem encountered at\0"
    "Records must be separated by commas.\0"
  },
  {
    "E(params.cpp)", 49,
    "Kakadu Core Error:\n",
    "Malformed attribute string\0"
    "Attribute does not support multiple parameter records!\0"
  },
  {
    "E(params.cpp)", 50,
    "Kakadu Core Error:\n",
    "Malformed attribute string\0"
    "Problem encountered at\0"
    "Records must be enclosed by curly braces, i.e., '{' and '}'.\0"
  },
  {
    "E(params.cpp)", 51,
    "Kakadu Core Error:\n",
    "Malformed attribute string\0"
    "Problem encountered at\0"
    "Fields must be separated by commas.\0"
  },
  {
    "E(params.cpp)", 52,
    "Kakadu Core Error:\n",
    "Malformed attribute string\0"
    "Problem encountered at\0"
    "Expected a floating point field.\0"
  },
  {
    "E(params.cpp)", 53,
    "Kakadu Core Error:\n",
    "Malformed attribute string\0"
    "Problem encountered at\0"
    "Expected an integer field.\0"
  },
  {
    "E(params.cpp)", 54,
    "Kakadu Core Error:\n",
    "Malformed attribute string\0"
    "Problem encountered at\0"
    "Expected a boolean field identifier, i.e., one of \"yes\" or \"no\".\0"
  },
  {
    "E(params.cpp)", 55,
    "Kakadu Core Error:\n",
    "Malformed attribute string\0"
    "Problem encountered at\0"
  },
  {
    "E(params.cpp)", 56,
    "Kakadu Core Error:\n",
    "Malformed attribute string\0"
    "Problem encountered at\0"
  },
  {
    "E(params.cpp)", 57,
    "Kakadu Core Error:\n",
    "Malformed attribute string\0"
    "Problem encountered at\0"
    "Opening brace for record is not matched by a closing brace.\0"
  },
  {
    "E(params.cpp)", 63,
    "Kakadu Core Error:\n",
    "Cannot apply requested resolution reduction without creating a SIZ marker segment with illegal component sub-sampling factors.  For the current code-stream, sub-sampling factors would be required which exceed the legal range of 1 to 255.\0"
  },
  {
    "E(params.cpp)", 67,
    "Kakadu Core Error:\n",
    "Error attempting to convert geometrically transformed canvas coordinates to legal marker ranges.  Try using a smaller precinct size (you can use the transcoding utility to achieve this at the same time as geometric transformations.\0"
  },
  {
    "E(params.cpp)", 74,
    "Kakadu Core Error:\n",
    "Malformed SIZ marker segment encountered. The final \0"
    " bytes were not consumed!\0"
  },
  {
    "E(params.cpp)", 75,
    "Kakadu Core Error:\n",
    "Malformed SIZ marker segment encountered. Marker segment is too small.\0"
  },
  {
    "E(params.cpp)", 76,
    "Kakadu Core Error:\n",
    "Problem trying to finalize SIZ information. Insufficient data supplied to determine the number of image components! Available information is as follows:\n\n\0"
  },
  {
    "E(params.cpp)", 77,
    "Kakadu Core Error:\n",
    "Problem trying to finalize SIZ information. Component dimensions are only partially available!\0"
  },
  {
    "E(params.cpp)", 78,
    "Kakadu Core Error:\n",
    "Problem trying to finalize SIZ information Component sub-sampling factors are only partially available!\0"
  },
  {
    "E(params.cpp)", 79,
    "Kakadu Core Error:\n",
    "Image component sub-sampling factors must be strictly positive!\0"
  },
  {
    "E(params.cpp)", 80,
    "Kakadu Core Error:\n",
    "Problem trying to finalize SIZ information. Must have either the individual component dimensions or the component sub-sampling factors.\0"
  },
  {
    "E(params.cpp)", 81,
    "Kakadu Core Error:\n",
    "Problem trying to finalize SIZ information. Must have either the image component dimensions or the canvas size! Available information is as follows:\n\n\0"
  },
  {
    "E(params.cpp)", 82,
    "Kakadu Core Error:\n",
    "Problem trying to finalize SIZ information Component dimensions are not consistent with a legal set of sub-sampling factors. Available information is as follows:\n\n\0"
  },
  {
    "E(params.cpp)", 83,
    "Kakadu Core Error:\n",
    "Problem trying to finalize SIZ information. Horizontal canvas and image component dimensions are not compatible.  Available information is as follows:\n\n\0"
  },
  {
    "E(params.cpp)", 84,
    "Kakadu Core Error:\n",
    "Problem trying to finalize SIZ information. Vertical canvas and image component dimensions are not compatible.  Available information is as follows:\n\n\0"
  },
  {
    "E(params.cpp)", 85,
    "Kakadu Core Error:\n",
    "Problem trying to finalize SIZ information. Horizontal component dimensions and sub-sampling factors are incompatible. Available information is as follows:\n\n\0"
  },
  {
    "E(params.cpp)", 86,
    "Kakadu Core Error:\n",
    "Problem trying to finalize SIZ information. Vertical component dimensions and sub-sampling factors are incompatible. Available information is as follows:\n\n\0"
  },
  {
    "E(params.cpp)", 87,
    "Kakadu Core Error:\n",
    "Problem trying to finalize SIZ information. Dimensions are inconsistent.  Available information is as follows:\n\n\0"
  },
  {
    "E(params.cpp)", 88,
    "Kakadu Core Error:\n",
    "Problems trying to finalize SIZ information. Illegal tile origin coordinates.  The first tile must have a non-empty intersection with the image region on the canvas. Available information is as follows:\n\n\0"
  },
  {
    "E(params.cpp)", 94,
    "Kakadu Core Error:\n",
    "You cannot use a colour transform unless the first 3 image components have identical bit-depths and are either all reversible or all irreversible.\0"
  },
  {
    "E(params.cpp)", 101,
    "Kakadu Core Error:\n",
    "Malformed COD marker segment encountered. Invalid \"Scod\" value!\0"
  },
  {
    "E(params.cpp)", 102,
    "Kakadu Core Error:\n",
    "Malformed COD marker segment encountered. Marker segment is too small.\0"
  },
  {
    "E(params.cpp)", 103,
    "Kakadu Core Error:\n",
    "Malformed COC marker segment. Invalid \"Scoc\" value!\0"
  },
  {
    "E(params.cpp)", 104,
    "Kakadu Core Error:\n",
    "Malformed COC marker segment encountered. Marker segment is too small.\0"
  },
  {
    "E(params.cpp)", 106,
    "Kakadu Core Error:\n",
    "Malformed COD/COC marker segment encountered. The final \0"
    " bytes were not consumed!\0"
  },
  {
    "E(params.cpp)", 107,
    "Kakadu Core Error:\n",
    "Malformed COD/COC marker segment encountered. Marker segment is too small.\0"
  },
  {
    "E(params.cpp)", 108,
    "Kakadu Core Error:\n",
    "Illegal number of quality layers, \0"
    ", detected by coding parameter sub-system; legal code-streams may have no more than 16384 quality layers.\0"
  },
  {
    "E(params.cpp)", 109,
    "Kakadu Core Error:\n",
    "Illegal number of DWT levels, \0"
    ", detected by coding parameter sub-system; legal code-streams may have no more than 32 DWT levels in any given tile-component.\0"
  },
  {
    "E(params.cpp)", 116,
    "Kakadu Core Error:\n",
    "Illegal number of guard bits, \0"
    ". Legal range is from 0 to 7.\0"
  },
  {
    "E(params.cpp)", 118,
    "Kakadu Core Error:\n",
    "Absolute ranging parameters for reversibly compressed subbands must be non-negative, no larger than 31!\0"
  },
  {
    "E(params.cpp)", 120,
    "Kakadu Core Error:\n",
    "Undefined style byte found in QCD/QCC marker segment!\0"
  },
  {
    "E(params.cpp)", 121,
    "Kakadu Core Error:\n",
    "Malformed QCD/QCC marker segment encountered. The final \0"
    " bytes were not consumed!\0"
  },
  {
    "E(params.cpp)", 122,
    "Kakadu Core Error:\n",
    "Malformed QCD/QCC marker segment encountered. Marker segment is too small.\0"
  },
  {
    "E(params.cpp)", 123,
    "Kakadu Core Error:\n",
    "Trying to finalize quantization parameter attributes without first providing any information about the image component bit-depths (i.e. \"Sprecision\").\0"
  },
  {
    "E(params.cpp)", 124,
    "Kakadu Core Error:\n",
    "Illegal ROI up-shift, \0"
    ". Legal range is from 0 to 255!\0"
  },
  {
    "E(params.cpp)", 125,
    "Kakadu Core Error:\n",
    "Encountered non-Part1 RGN marker segment!\0"
  },
  {
    "E(params.cpp)", 126,
    "Kakadu Core Error:\n",
    "Malformed RGN marker segment encountered. The final \0"
    " bytes were not consumed!\0"
  },
  {
    "E(params.cpp)", 127,
    "Kakadu Core Error:\n",
    "Malformed RGN marker segment encountered. Marker segment is too small.\0"
  },
  {
    "E(params.cpp)", 128,
    "Kakadu Core Error:\n",
    "Information required to write POC marker segment is not currently complete!\0"
  },
  {
    "E(params.cpp)", 130,
    "Kakadu Core Error:\n",
    "Illegal lower bound, \0"
    ", for resolution level indices in progression order change attribute.  Legal range is from 0 to 32.\0"
  },
  {
    "E(params.cpp)", 131,
    "Kakadu Core Error:\n",
    "Illegal upper bound (exclusive), \0"
    ", for resolution level indices in progression order change attribute.  Legal range is from the lower bound + 1 to 33.\0"
  },
  {
    "E(params.cpp)", 132,
    "Kakadu Core Error:\n",
    "Illegal lower bound, \0"
    ", for component indices in progression order change attribute.  Legal range is from 0 to \0"
  },
  {
    "E(params.cpp)", 133,
    "Kakadu Core Error:\n",
    "Illegal upper bound (exclusive), \0"
    ", for component indices in progression order change attribute.  Legal range is from the lower bound + 1 to \0"
  },
  {
    "E(params.cpp)", 134,
    "Kakadu Core Error:\n",
    "Illegal upper bound (exclusive), \0"
    ", for layer indices in progression order change attribute.  Legal range is from 0 to \0"
  },
  {
    "E(params.cpp)", 135,
    "Kakadu Core Error:\n",
    "Malformed POC marker segment encountered. The final \0"
    " bytes were not consumed!\0"
  },
  {
    "E(params.cpp)", 136,
    "Kakadu Core Error:\n",
    "Malformed POC marker segment encountered. Marker segment is too small.\0"
  },
  {
    "E(params.cpp)", 138,
    "Kakadu Core Error:\n",
    "Illegal component registration offsets, {\0"
    "}.  Legal range is from 0.0 to 1.0 (exclusive).\0"
  },
  {
    "E(params.cpp)", 139,
    "Kakadu Core Error:\n",
    "Malformed CRG marker segment encountered. The final \0"
    " bytes were not consumed!\0"
  },
  {
    "E(params.cpp)", 140,
    "Kakadu Core Error:\n",
    "Malformed CRG marker segment encountered. Marker segment is too small.\0"
  },
  {
    "E(params.cpp)", 23050500,
    "Kakadu Core Error:\n",
    "You cannot provide custom transform kernel data via `Ksteps' or `Kcoeffs' without also providing a value for the `Kreversible' attribute.\0"
  },
  {
    "E(params.cpp)", 33883404,
    "Kakadu Core Error:\n",
    "Malformed ATK marker segment encountered.  Marker segment is too small.\0"
  },
  {
    "E(params.cpp)", 38077697,
    "Kakadu Core Error:\n",
    "ADS table index encountered while finalizing COD/COD marker segment information does not refer to accessible ADS (Arbitrary Decomposition Styles) information.\0"
  },
  {
    "E(params.cpp)", 38077698,
    "Kakadu Core Error:\n",
    "DFS table index encountered while finalizing COD/COD marker segment information does not refer to accessible DFS (Downsampling Factor Styles) information.\0"
  },
  {
    "E(params.cpp)", 38813963,
    "Kakadu Core Error:\n",
    "Profile violation detected.  Code-streams marked with a multi-tile BROADCAST profile may have either 1 tile, or 4 tiles all of the same size, where multiple tiles must be arranged either as 2 across by 2 down, or 1 across by 4 down.\0"
  },
  {
    "E(params.cpp)", 67503872,
    "Kakadu Core Error:\n",
    "You cannot use a Part-1 colour transform (`Cycc=yes') at the same time as a Part-2 multi-component transform (`Cmct != 0').\0"
  },
  {
    "E(params.cpp)", 67503873,
    "Kakadu Core Error:\n",
    "You can no longer generate a codestream which uses the `MAT' (`Mxform_MAT' in source code) option for the `Mstage_xforms' parameter attribute.  From Kakadu v6.0, matrix-based multi-component transform blocks should use the `MATRIX' (`Mxform_MATRIX' in source code) identifier.  This change is designed to force awareness of the fact that the organization of matrix coefficients for reversible matrix decorrelation transforms has been altered, in order to comply with IS15444-2.  In particular, versions prior to v6.0 considered the coefficients for reversible (SERM) matrix transforms to have a transposed order, relative to that specified in the standard.  If you are trying to generate a codestream which employs only irreversible matrix transforms, you have simply to substitute `MATRIX' for `MAT'.  If you are working with reversible matrix multi-component transforms, you should first transpose the coefficient matrix.\0"
  },
  {
    "E(params.cpp)", 83957505,
    "Kakadu Core Error:\n",
    "Unrecognized pre-defined kernel identifier supplied to `Kkernels' attribute.\0"
  },
  {
    "E(params.cpp)", 101848065,
    "Kakadu Core Error:\n",
    "Illegal profile index.  \"Sprofile\" must be in the range 0 to 10: Profile-0 is the most restrictive original Part-1 profile; Profile-2 is the unrestricted Part-1 profile; 3 means that the codestream conforms to Part-2 of the standard; 4 and 5 are for the restrictive Digital Cinema profiles, added by an ammendment to Part-1 of the standard; 6 is for the similarly restrictive Broadcast profile, also added as an ammendment to Part-1 of the standard; 7, 8 and 9 are for scalable digital cinema pofiles, added by another ammendment to Part-1 of the standard; and 10 is for the Interoperable Master Format (IMF), added by yet another ammendment to Part-1 of the standard.\0"
  },
  {
    "E(params.cpp)", 101848066,
    "Kakadu Core Error:\n",
    "The `Sbroadcast' parameter attributes are incompatible.  The first first field of this attribute identifies the broadcast level, which must be in the range 0 to 11.  The multi-tile reversible profile is restricted to levels 6 and 7 only, but no level restrictions apply to the single-tile or multi-tile irreversible profiles, since the introduction of IS15444-1/AMD8.\0"
  },
  {
    "E(params.cpp)", 101848067,
    "Kakadu Core Error:\n",
    "The `Sprofile' and `Simf' parameter attributes are incompatible.  You have specified `Simf' parameters, yet the `Sprofile' value was set to something other than \"IMF\".\0"
  },
  {
    "E(params.cpp)", 101848068,
    "Kakadu Core Error:\n",
    "The `Simf' main-level and sub-level parameters are incompatible.  The main-level must lie in the range 0 to 11, while the sub-level must lie in the range 0 to 9.  Moreover, sub-level may not exceed the larger of 1 and the main-level minus 2.\0"
  },
  {
    "E(params.cpp)", 101848069,
    "Kakadu Core Error:\n",
    "Profile violation detected.  Code-streams with one of the Digital Cinema profiles CINEMA2K, CINEMA4K, CINEMA2S or CINEMA4S must have unsigned image components with a precision of 12 bits and all sub-sampling factors equal to 1.  Those marked with a BROADCAST profile have similar restrictions, except that the precision can be anywhere from 8 to 12 and the second and third image components may alternatively both have horizontal sub-sampling factors of 2.  Codestreams with an IMF profile have almost the same restrictions as the BROADCAST case, except that the maximum allowed precision is 16.\0"
  },
  {
    "E(params.cpp)", 101848070,
    "Kakadu Core Error:\n",
    "Profile violation detected.  Code-streams marked with a reversible IMF profile must either be untiled, or else tiled with tiles of size 1024x1024, 2048x2048 or 4096x4096; moreover, the larger tiles are only compatible with images large enough to require the larger format IMF profile variants.\0"
  },
  {
    "E(params.cpp)", 101848072,
    "Kakadu Core Error:\n",
    "Profile violation detected.  Code-streams marked with an IMF profile may not have dimensions that exceed the 8K limit of 6224x8192 (height x width).\0"
  },
  {
    "E(params.cpp)", 101848073,
    "Kakadu Core Error:\n",
    "Profile violation detected.  The Digital Cinema, BROADCAST and IMF profiles impose strict limits on the number of DWT decomposition levels.  The maximum number of levels is 5 for CINEMA2K, CINEMA2S and BROADCAST profiles, 6 for CINEMA4K and CINEMA4S profiles, and somewhere between 4 and 7 for IMF profiles, depending on the tile dimensions, if tiled, and image dimensions.  The minimum number of levels is 1 for CINEMA4K, CINEMA4S, BROADCAST and IMF profiles, while the \"long term storage\" profile CINEMASS requires sufficient levels to ensure that the LL subband's dimensions will be at most 64.\0"
  },
  {
    "E(params.cpp)", 268506632,
    "Kakadu Core Error:\n",
    "Invalid bit-depth value found in NLT marker segment.  Bit-depths must lie in the range 1 to 38.\0"
  },
  {
    "E(params.cpp)", 268506633,
    "Kakadu Core Error:\n",
    "Malformed NLT marker segment encountered.  Lookup table parameters outside legal range!\0"
  },
  {
    "E(params.cpp)", 268506640,
    "Kakadu Core Error:\n",
    "Malformed NLT marker segment encountered.  Marker segment is too small.\0"
  },
  {
    "E(params.cpp)", 268506641,
    "Kakadu Core Error:\n",
    "NLT attributes `NLTtype', `NLTgamma', `NLTlut' and `NLTdata' can be used only if `Sextensions' contains the NLT flag and the relevant output component(s) have defined `Nprecision' and `Nsigned' parameter attributes.\0"
  },
  {
    "E(params.cpp)", 285283841,
    "Kakadu Core Error:\n",
    "`NLType' attribute must be one of NONE=0, GAMMA=1, LUT=2, SMAG=3 or UMAG=4.\0"
  },
  {
    "E(params.cpp)", 285283842,
    "Kakadu Core Error:\n",
    "First record of `NLTmake' attribute has missing parameters P1, P2 or N or an invalid operation: must be one of GAMMA, IGAMMA, LOG or ILOG.\0"
  },
  {
    "E(params.cpp)", 285283843,
    "Kakadu Core Error:\n",
    "The non-linear point transform type `NLType' SMAG=3 can only be used in contexts where the input and output samples have identical precision and both represent signed data -- use UMAG for unsigned data.\0"
  },
  {
    "E(params.cpp)", 286328834,
    "Kakadu Core Error:\n",
    "Profile violation detected.  The Digital Cinema profiles CINEMA2K, CINEMA4K, CINEMA2S and the IMF profiles require a code-block size of exactly 32x32.  You have specified something different.\0"
  },
  {
    "E(params.cpp)", 286328838,
    "Kakadu Core Error:\n",
    "Profile violation detected.  Requested precinct dimensions are incompatible with the use of Digital Cinema profiles CINEMA2K, CINEMA4K, CINEMA2S, CINEMA4S or a BROADCAST or IMF profile.  All precincts need to be of size 256x256 except the lowest resolution level which needs 128x128\0"
  },
  {
    "E(params.cpp)", 286328839,
    "Kakadu Core Error:\n",
    "Profile violation detected.  COD/COC marker segments may only appear in the main header of a code-stream marked with one of the Digital Cinema profiles (CINEMA2K, CINEMA4K, CINEMA2S, CINEMA4S or CINEMASS) or with a BROADCAST or IMF profile.\0"
  },
  {
    "E(params.cpp)", 286328852,
    "Kakadu Core Error:\n",
    "Profile violation detected.  Code-streams marked with the CINEMA2K Digital Cinema profile may have a maximum width of 2048 and a maximum height of 1080.\0"
  },
  {
    "E(params.cpp)", 286328853,
    "Kakadu Core Error:\n",
    "Profile violation detected.  Code-streams marked with the CINEMA4K Digital Cinema profile may have a maximum width of 4096 and a maximum height of 2160.\0"
  },
  {
    "E(params.cpp)", 286328881,
    "Kakadu Core Error:\n",
    "Profile violation detected.  POC marker segments may not be included in tile-part headers of Digital Cinema code-streams.  You should either remove the `Sprofile' attribute, or remove the tile-specific `Porder' attribute.\0"
  },
  {
    "E(params.cpp)", 286328882,
    "Kakadu Core Error:\n",
    "Profile violation detected.  You have supplied `Porder' attributes which are not consistent with the Digital Cinema or BROADCAST profile specified.  You should let the parameter management system set the `Porder' attributes for you, to ensure profile compliance.\0"
  },
  {
    "E(params.cpp)", 318838273,
    "Kakadu Core Error:\n",
    "The `Ncomponents' attribute must agree with `Mcomponents', if it is non-zero, else with `Scomponents'.  You can let the machinery auto-fill the `Ncomponents' value.\0"
  },
  {
    "E(params.cpp)", 318838274,
    "Kakadu Core Error:\n",
    "You have specified global (component-wide) NLT (non-linear transform) atributes, so all image components that do not have their own overriding NLT attributes must have the same Nprecision and Nsigned values as component 0 -- we adopt component 0's precision/signed information when writing a global NLT marker segment.\0"
  },
  {
    "E(params.cpp)", 318838275,
    "Kakadu Core Error:\n",
    "Nprecision/Nsigned values must match Mprecision/Msigned for components that have no NLT (no `NLTtype' attribute).\0"
  },
  {
    "E(params.cpp)", 318838276,
    "Kakadu Core Error:\n",
    "Nprecision/Nsigned values must match Sprecision/Ssigned for components that have no NLT (no `NLTtype' attribute) with no MCT.\0"
  },
  {
    "E(params.cpp)", 319099649,
    "Kakadu Core Error:\n",
    "Illegal code-block dimensions supplied for `Cblk' parameter attribute -- code-block width and height values must be powers of 2 in the range 4 to 1024, whose product does not exceed 4096.\0"
  },
  {
    "E(params.cpp)", 319099650,
    "Kakadu Core Error:\n",
    "Illegal code-block width/height exponents found in COD/COC marker segment.  Code-block dimensions must be powers of 2, in the range 4-1024, whose product lies in the range 16-4096.\0"
  },
  {
    "E(params.cpp)", 352392707,
    "Kakadu Core Error:\n",
    "Malformed NLT marker segment encountered; transform type code must be in the range 0 to 3.\0"
  },
  {
    "E(params.cpp)", 352392708,
    "Kakadu Core Error:\n",
    "The non-linear point transform type `NLType' UMAG=4 can only be used in contexts where the input and output samples have identical precision and both represent unsigned data -- use SMAG for signed data.\0"
  },
  {
    "E(params.cpp)", 386077186,
    "Kakadu Core Error:\n",
    "Malformed CAP marker segment encountered.  Marker segment is too small.\0"
  },
  {
    "E(params.cpp)", 386077189,
    "Kakadu Core Error:\n",
    "Unrecognized block-coding extensions flags found in COD/COC marker segment -- value is \0"
  },
  {
    "E(params.cpp)", 402854401,
    "Kakadu Core Error:\n",
    "Unrecognized code-block style byte found in COD/COC marker segment.  Most significant 2 bits should be 0.\0"
  },
  {
    "E(params.cpp)", 419759360,
    "Kakadu Core Error:\n",
    "Illegal ATK instance index found when preparing to generate COD/COC marker segment.  Legal values are in the range 2 to 255.\0"
  },
  {
    "E(params.cpp)", 419759361,
    "Kakadu Core Error:\n",
    "Illegal `Ckernels' value found when preparing to generate COD/COC marker segment.  Reversible processes must use the W5X3 kernel, while irreversible processes must use the W9X7 kernel, unless you have explicitly identified a different (Part-2) kernel, via the `Catk' attribute.\0"
  },
  {
    "E(params.cpp)", 419759362,
    "Kakadu Core Error:\n",
    "Unable to access the `Kreversible' attribute associated with the `Catk' index found while finalizing a COD/COC marker segment.  The value of the `Catk' index is\0"
  },
  {
    "E(params.cpp)", 419759363,
    "Kakadu Core Error:\n",
    "Illegal `Ckernels' value found while finalizing a COD/COC marker segment.  Reversible processes must use the W5X3 kernel, while irreversible processes must use the W9X7 kernel, unless you have explicitly identified a different (Part-2) kernel, via the `Catk' attribute.\0"
  },
  {
    "E(params.cpp)", 419759364,
    "Kakadu Core Error:\n",
    "Illegal ATK instance index found when finalizing a COD/COC marker segment.  Legal values are in the range 2 to 255.\0"
  },
  {
    "E(params.cpp)", 419759365,
    "Kakadu Core Error:\n",
    "Cannot transpose ATK marker segment information to a new codestream which has flippped geometry unless the transform filters are whole-sample symmetric, or flipping is to be applied in both the vertical and horizontal directions.  The reason for this is that the same transform kernels must be used in both directions, only one of which requires reversal of the lifting coefficients.\0"
  },
  {
    "E(params.cpp)", 419890436,
    "Kakadu Core Error:\n",
    "Malformed CBD marker segment encountered. The final \0"
    " bytes were not consumed!\0"
  },
  {
    "E(params.cpp)", 419890437,
    "Kakadu Core Error:\n",
    "Malformed CBD marker segment encountered. Marker segment is too small.\0"
  },
  {
    "E(params.cpp)", 420025089,
    "Kakadu Core Error:\n",
    "Profile violation detected.  Code-streams marked with the \"long term storage\" cinema profile must have tiles that are at least 1024 wide and 512 high, or else use only a single tile.\0"
  },
  {
    "E(params.cpp)", 420025090,
    "Kakadu Core Error:\n",
    "Profile violation detected.  Code-streams marked with the CINEMASS Digital Cinema profile (for \"long term storage\") may have a maximum width of 16384 and a maximum height of 8640.\0"
  },
  {
    "E(params.cpp)", 420025093,
    "Kakadu Core Error:\n",
    "Profile violation detected.  The \"long term storage\" cinema profile CINEMASS requires code-block dimensions to be no larger than 64 in each direction.\0"
  },
  {
    "E(params.cpp)", 537199873,
    "Kakadu Core Error:\n",
    "Incomplete `Ksteps' record (need 4 fields in each record) found while in `atk_params::finalize'.\0"
  },
  {
    "E(params.cpp)", 537199874,
    "Kakadu Core Error:\n",
    "Invalid downshifting value (3'rd field) found while checking supplied `Ksteps' attributes.  Values must be in the range 0 to 24.\0"
  },
  {
    "E(params.cpp)", 537199875,
    "Kakadu Core Error:\n",
    "Insufficient `Kcoeffs' records found while in `atk_params::finalize'.  The number of coefficients must be equal to the sum of the lifting step lengths recorded in the `Ksteps' attribute.\0"
  },
  {
    "E(params.cpp)", 537199876,
    "Kakadu Core Error:\n",
    "Too many `Kcoeffs' records found while in `atk_params::finalize'.  The number of coefficients must be equal to the sum of the lifting step lengths recorded in the `Ksteps' attribute.\0"
  },
  {
    "E(params.cpp)", 537199877,
    "Kakadu Core Error:\n",
    "Reversible lifting steps defined by `Ksteps' and `Kcoeffs' produce a low-pass analysis filter whose DC gain is not equal to 1.\0"
  },
  {
    "E(params.cpp)", 537199881,
    "Kakadu Core Error:\n",
    "Invalid `Ksymmetric' value found while in `atk_params::finalize'.  The lifting step alignment and coefficients are not compatible with the whole-sample symmetric class of wavelet kernels defined by Part-2 of the JPEG2000 standard.\0"
  },
  {
    "E(params.cpp)", 537199882,
    "Kakadu Core Error:\n",
    "Cannot process ATK marker segment which uses more than 8 bytes to represent each lifting step coefficient.\0"
  },
  {
    "E(params.cpp)", 537199883,
    "Kakadu Core Error:\n",
    "Malformed ATK marker segment encountered.  Transform kernels identified as whole-sample symmetric must also use the symmetric boundary extension method.\0"
  },
  {
    "E(params.cpp)", 537199885,
    "Kakadu Core Error:\n",
    "Malformed ATK marker segment encountered. The final \0"
    " bytes were not consumed!\0"
  },
  {
    "E(params.cpp)", 537330944,
    "Kakadu Core Error:\n",
    "Failed to read all MCT marker segments in a series associated with a given `Imct' index within a main or initial tile-part header.  Codestream is not correctly constructed.\0"
  },
  {
    "E(params.cpp)", 537330945,
    "Kakadu Core Error:\n",
    "Illegal value (anything <= 0) found for `Mmatrix_size', `Mvector_size' or `Mtriang_size' attribute while finalizing the MCT transform coefficients.\0"
  },
  {
    "E(params.cpp)", 537330946,
    "Kakadu Core Error:\n",
    "The number of `Mmatrix_coeffs', `Mvector_coeffs' or `Mtriang_coeffs' entries found while finalizing MCT transform coefficients does not match the corresponding `Mmatrix_size', `Mvector_size' or `Mtriang_size' value.\0"
  },
  {
    "E(params.cpp)", 537330947,
    "Kakadu Core Error:\n",
    "Encountered repeat or out-of-range `Zmct' field while parsing an MCT marker segment.  The `Zmct' field is used to enumerate marker segments which belong to a common series, but the value encountered is inconsistent with the rest of the series.  This is a malformed codestream.\0"
  },
  {
    "E(params.cpp)", 537330948,
    "Kakadu Core Error:\n",
    "Encountered out-of-order `Zmct' field while parsing MCT marker segments belonging to a series.  While this is not strictly illegal, it makes no sense for a content creator to write MCT marker segments out of order.  Kakadu does not currently support reordering of these optional Part-2 marker segments.\0"
  },
  {
    "E(params.cpp)", 537330949,
    "Kakadu Core Error:\n",
    "Malformed MCT marker segment encountered.  Marker segment is too small.\0"
  },
  {
    "E(params.cpp)", 537330950,
    "Kakadu Core Error:\n",
    "Malformed MCT marker segment encountered. The final \0"
    " bytes were not consumed!\0"
  },
  {
    "E(params.cpp)", 537465601,
    "Kakadu Core Error:\n",
    "Profile violation detected.  Requested block coding mode is incompatible with the use of the \"long term storage\" digital cinema profile.\0"
  },
  {
    "E(params.cpp)", 537465602,
    "Kakadu Core Error:\n",
    "Profile violation detected.  Requested precinct dimensions are incompatible with the \"long term storage\" cinema profile CINEMASS.  Precinct dimensions, as recorded in the COD marker segment, must be no smaller than code-block dimensions in this case.\0"
  },
  {
    "E(params.cpp)", 537465603,
    "Kakadu Core Error:\n",
    "Profile violation detected.  Digital Cinema profiles CINEMA2K, CINEMA4K, CINEMA2S and CINEMA4S, must use the irreversible processing path, with the 9/7 DWT.\0"
  },
  {
    "E(params.cpp)", 553911552,
    "Kakadu Core Error:\n",
    "Malformed location specifier encountered in attribute string\0"
    "You must supply an index specifier of the form \"I<num>\" for this type of parameter.\0"
  },
  {
    "E(params.cpp)", 553911553,
    "Kakadu Core Error:\n",
    "Malformed location specifier encountered in attribute string\0"
    "This type of parameter cannot be used with an index specifier (i.e., a specifier of the form \"I<num>\").\0"
  },
  {
    "E(params.cpp)", 553911554,
    "Kakadu Core Error:\n",
    "Illegal profile index.  \"Sprofile\" must be set in the range 0 to 9; 3 is required if Part 2 features are to be used.\0"
  },
  {
    "E(params.cpp)", 553911555,
    "Kakadu Core Error:\n",
    "Invalid Rsiz word encountered in SIZ marker segment!  Value is: \0"
  },
  {
    "E(params.cpp)", 553977088,
    "Kakadu Core Error:\n",
    "Cannot process ATK marker segment describing a reversible transform kernel with floating-point coefficient values.\0"
  },
  {
    "E(params.cpp)", 554108161,
    "Kakadu Core Error:\n",
    "It is illegal to supply `Mvector_size', `Mtriang_size' or `Mvector_size' attributes with zero-valued instance indices (equivalently, with missing instance indices).  Use the \":I=...\" suffix when providing MCT transform coefficients.\0"
  },
  {
    "E(params.cpp)", 554108163,
    "Kakadu Core Error:\n",
    "Illegal parameters supplied for `Mstage_inputs' attribute.  Component index ranges must have lower bounds which do not exceed their corresponding upper bounds, both of which must be in the range 0 to 16383.\0"
  },
  {
    "E(params.cpp)", 554108164,
    "Kakadu Core Error:\n",
    "Illegal parameters supplied for `Mstage_outputs' attribute.  Component index ranges must have lower bounds which do not exceed their corresponding upper bounds, both of which must be in the range 0 to 16383.\0"
  },
  {
    "E(params.cpp)", 554108165,
    "Kakadu Core Error:\n",
    "Malformed `Mstage_collections' attribute encountered in `mcc_params::finalize'.  Each transform block must be assigned a strictly positive number of input and output components.\0"
  },
  {
    "E(params.cpp)", 554108166,
    "Kakadu Core Error:\n",
    "Malformed `Mstage_collections' attribute encountered in `mcc_params::finalize'.  The transform blocks must together consume all input components defined by `Mstage_inputs' (no more and no less) and produce all output components defined by `Mstage_outputs' (no more and no less).\0"
  },
  {
    "E(params.cpp)", 554108167,
    "Kakadu Core Error:\n",
    "Malformed `Mstage_xforms' attribute encountered in `mcc_params::finalize'.  Each record must have 5 fields, the second and third of which must lie in the range 0 to 255.\0"
  },
  {
    "E(params.cpp)", 554108168,
    "Kakadu Core Error:\n",
    "Malformed `Mstage_xforms' attribute encountered in `mcc_params::finalize'.  The fourth field in a DWT record must contain a number of DWT levels in the range 0 to 32.\0"
  },
  {
    "E(params.cpp)", 554108169,
    "Kakadu Core Error:\n",
    "Malformed `Mstage_xforms' attribute encountered in `mcc_params::finalize'.  The fourth field in a DEP or MATRIX record must hold one of the values 0 (irreversible) or 1 (reversible), with the fifth field equal to zero.\0"
  },
  {
    "E(params.cpp)", 554108170,
    "Kakadu Core Error:\n",
    "Malformed `Mstage_xforms' attribute encountered in `mcc_params::finalize'.  The number of records in this attribute must be identical to the number of records in `Mstage_collections'.\0"
  },
  {
    "E(params.cpp)", 554108171,
    "Kakadu Core Error:\n",
    "Encountered MCC (Multi-component transform Component Collection) information which has been split across multiple marker segments.  While this is not illegal, Kakadu does not currently support such massive multi-component transform descriptions.  It is a rare application indeed that would need multiple marker segments.\0"
  },
  {
    "E(params.cpp)", 554108172,
    "Kakadu Core Error:\n",
    "Malformed MCC marker segment encountered.  Invalid component collection dimensions, transform type or number of DWT levels.\0"
  },
  {
    "E(params.cpp)", 554108173,
    "Kakadu Core Error:\n",
    "Malformed MCC marker segment encountered.  Marker segment is too small.\0"
  },
  {
    "E(params.cpp)", 554108174,
    "Kakadu Core Error:\n",
    "Malformed MCC marker segment encountered. The final \0"
    " bytes were not consumed!\0"
  },
  {
    "E(params.cpp)", 554108175,
    "Kakadu Core Error:\n",
    "Unable to write MCC (Multi-component transform Component Collection) marker segment, since the amount of information is too large to fit within a single marker segment.  The codestream syntax for this Part-2 marker segment allows the information to be split across multiple marker segments, but this feature is not yet implemented in Kakadu -- it is a rare application indeed that should need this.\0"
  },
  {
    "E(params.cpp)", 554108176,
    "Kakadu Core Error:\n",
    "You may not provide a value for the `Mnum_stages' attribute without also supplying a non-zero number of MCT output components via the `Mcomponents' attribute.\0"
  },
  {
    "E(params.cpp)", 554108177,
    "Kakadu Core Error:\n",
    "The number of records supplied for the `Mstages' attribute must match the value identified by `Mnum_stages'.\0"
  },
  {
    "E(params.cpp)", 554108178,
    "Kakadu Core Error:\n",
    "Malformed MCO marker segment encountered. The final \0"
    " bytes were not consumed!\0"
  },
  {
    "E(params.cpp)", 554108179,
    "Kakadu Core Error:\n",
    "Malformed MCO marker segment encountered. Marker segment is too small.\0"
  },
  {
    "E(params.cpp)", 554108180,
    "Kakadu Core Error:\n",
    "Cannot write MCO marker segment; `Mnum_stages' value exceeds the limit of 255.\0"
  },
  {
    "E(params.cpp)", 554242819,
    "Kakadu Core Error:\n",
    "Profile violation detected.  POC marker segments may not be included in code-streams marked with the \"long term storage\" digital cinema profile.\0"
  },
  {
    "E(params.cpp)", 554701572,
    "Kakadu Core Error:\n",
    "Found DFS (downsampling factor style) or ADS (arbitrary decomposition style) extension information in a COD/COC marker segment, where the number of decomposition levels should be recorded instead -- DFS/ADS info is allowed only where the number of levels can be inherited from other COD/COC marker segments.\0"
  },
  {
    "E(params.cpp)", 554701573,
    "Kakadu Core Error:\n",
    "Illegal number of DWT levels recorded in COD/COC marker segment -- max value is 32.  Codestream is likely corrupt!\0"
  },
  {
    "E(params.cpp)", 570885376,
    "Kakadu Core Error:\n",
    "Unable to modify the existing multi-component transform to work with a reduced number of codestream image components during transcoding.  Cannot create a taylored null transform to interface the components, since all allowed MCC marker segment instance indices have been used up already.\0"
  },
  {
    "E(params.cpp)", 587531521,
    "Kakadu Core Error:\n",
    "For irreversible transforms (`Kreversible' = false), the third and fourth fields in each record of the `Ksteps' attribute must both be 0.\0"
  },
  {
    "E(params.cpp)", 604308736,
    "Kakadu Core Error:\n",
    "Illegal combination of `Clevels' and `Cdfs' values detected.  JPEG2000 Part-2 codestreams record the DFS table index associated with the `Cdfs' parameter in a main header COC marker segment in place of the `Clevels' value.  Thus, you cannot use a arbitrary downsampling factor styles while also providing a new value for `Clevels'.\0"
  },
  {
    "E(params.cpp)", 604308737,
    "Kakadu Core Error:\n",
    "Unacceptable interaction between ADS (Arbitrary Decomposition Style) and DFS (Downsampling Factor Styles) information in Part-2 codestream.  It makes no sense to use the same ADS table for two tile-components which have different downsampling factor styles, since downsampling styles have a strong effect on the interpretation of information recorded in the ADS marker segment.\0"
  },
  {
    "E(params.cpp)", 604308739,
    "Kakadu Core Error:\n",
    "You are attempting to define a decomposition structure within a tile, which involves a different downsampling structure (different primary subband decomposition -- first character code of each record in `Cdecomp' attribute) to that defined (implicitly or explicitly) for the main codestream header.  This is illegal.\0"
  },
  {
    "E(params.cpp)", 621020417,
    "Kakadu Core Error:\n",
    "Illegal combination of `Clevels' and `Cads' values detected.  JPEG2000 Part-2 codestreams record the ADS table index associated with the `Cads' parameter in a tile-specific COD or COC marker segment in place of the `Clevels' value.  Thus, you cannot use a different `Clevels' value to the default inherited from a COD/COC marker segment with broader scope, while also specifying arbitrary decomposition styles via `Cads' and/or `Cdecomp'.\0"
  },
  {
    "E(params.cpp)", 621023238,
    "Kakadu Core Error:\n",
    "The `Sprofile' and `Sbroadcast' parameter attributes are incompatible.  You have specified `Sbroadcast' parameters, yet the `Sprofile' value was set to something other than \"BROADCAST\".\0"
  },
  {
    "E(params.cpp)", 621023240,
    "Kakadu Core Error:\n",
    "Profile violation detected.  Code-streams marked with one of the Digital Cinema profiles CINEMA2K, CINEMA4K, CINEMA2S or CINEMA4S must have exactly 3 image components; those marked with a BROADCAST profile may have at most 4 image components, while those marked with an IMF profile may have at most 3 components and the \"long term storage\" cinema profile allows at most 8 image components.\0"
  },
  {
    "E(params.cpp)", 621023241,
    "Kakadu Core Error:\n",
    "Profile violation detected.  Code-streams marked with a Digital Cinema (CINEMA2K, CINEMA4K, CINEMA2S, CINEMA4S or CINEMASS), BROADCAST or IMF profile must have their image and tile partition anchored at the origin.\0"
  },
  {
    "E(params.cpp)", 621023242,
    "Kakadu Core Error:\n",
    "Profile violation detected.  Code-streams marked with a Digital Cinema (CINEMA2K or CINEMA4K) or a single-tile BROADCAST or IMF profile must have only one tile.\0"
  },
  {
    "E(params.cpp)", 621085952,
    "Kakadu Core Error:\n",
    "Illegal `DSdfs' attribute value encountered.  Legal values must be in the range 0 to 3.\0"
  },
  {
    "E(params.cpp)", 621085953,
    "Kakadu Core Error:\n",
    "Malformed DFS marker segment encountered. Marker segment is too small.\0"
  },
  {
    "E(params.cpp)", 621085954,
    "Kakadu Core Error:\n",
    "Malformed DFS marker segment encountered. The final \0"
    " bytes were not consumed!\0"
  },
  {
    "E(params.cpp)", 621807105,
    "Kakadu Core Error:\n",
    "Codestream contains a parameter marker segment with an invalid image component or tile index: parameter type is\0"
    "tile number is\0"
    "component index is\0"
  },
  {
    "E(params.cpp)", 637797632,
    "Kakadu Core Error:\n",
    "Malformed attribute string\0"
    "Problem encountered at\0"
    "Attempt to parse custom string representation failed.  Read usage information carefully.\0"
  },
  {
    "E(params.cpp)", 637797633,
    "Kakadu Core Error:\n",
    "The `Ddecomp' attribute may be defined only for index values in the range 1 to 127.  Perhaps your decomposition structure requires too many distinct ADS marker segments.\0"
  },
  {
    "E(params.cpp)", 637797634,
    "Kakadu Core Error:\n",
    "Encountered invalid `Ddecomp' attribute value\0"
  },
  {
    "E(params.cpp)", 637797635,
    "Kakadu Core Error:\n",
    "Malformed ADS marker segment encountered. Marker segment is too small.\0"
  },
  {
    "E(params.cpp)", 637797636,
    "Kakadu Core Error:\n",
    "Malformed ADS marker segment encountered. The final \0"
    " bytes were not consumed!\0"
  },
  {
    "E(params.cpp)", 637797642,
    "Kakadu Core Error:\n",
    "The `DSdfs' attribute may be defined only for index values in the range 1 to 127.  Perhaps your decomposition structure requires too many distinct DFS marker segments.\0"
  },
  {
    "E(params.cpp)", 637800452,
    "Kakadu Core Error:\n",
    "Profile violation detected.  About to write a component-specific COD/COC marker segment, which identifies a different number of DWT decomposition levels (Clevels) to that identified in the main COD marker segment.  This is not legal for the Digital Cinema, BROADCAST or IMF profiles.\0"
  },
  {
    "E(params.cpp)", 637800453,
    "Kakadu Core Error:\n",
    "Profile violation detected.  About to write a component-specific COD/COC marker segment, which identifies different code-block dimensions to those identified in the main COD marker segment.  This is not legal for code-streams marked with a Digital Cinema, BROADCAST or IMF profile.\0"
  },
  {
    "E(params.cpp)", 637800455,
    "Kakadu Core Error:\n",
    "Profile violation detected.  The BROADCAST profiles require horizontal code-block sizes of 32, 64 or 128 and vertical code-block sizes of 32 or 64.\0"
  },
  {
    "E(params.cpp)", 637800456,
    "Kakadu Core Error:\n",
    "Profile violation detected.  Requested block coding mode is incompatible with the use of Digital Cinema profiles CINEMA2K, CINEMA4K, CINEMA2S or CINEMA4S and is also incompatible with all BROADCAST and IMF profiles.\0"
  },
  {
    "E(params.cpp)", 637800458,
    "Kakadu Core Error:\n",
    "Profile violation detected.  Digital Cinema, BROADCAST and IMF profiles require the CPRL packet progression order.\0"
  },
  {
    "E(params.cpp)", 637800459,
    "Kakadu Core Error:\n",
    "Profile violation detected.  The reversibility of the selected wavelet transform is incompatible with the reversibility indicated via an `Sbroadcast' or `Simf' attribute.\0"
  },
  {
    "E(params.cpp)", 637800461,
    "Kakadu Core Error:\n",
    "Profile violation detected.  QCD/QCC marker segments may only appear in the main header of a code-stream marked with one of the Digital Cinema or BROADCAST profiles.\0"
  },
  {
    "E(params.cpp)", 637800462,
    "Kakadu Core Error:\n",
    "Profile violation detected.  POC marker segments may not be included in 2K Digital Cinema (CINEMA2K) or BROADCAST code-streams.  You should either modify the `Sprofile' attribute or remove the `Porder' attribute.\0"
  },
  {
    "E(params.cpp)", 637800463,
    "Kakadu Core Error:\n",
    "Profile violation detected.  RGN marker segments are disallowed in code-streams marked with any of the Digital Cinema or BROADCAST profiles.\0"
  },
  {
    "E(params.cpp)", 654574848,
    "Kakadu Core Error:\n",
    "Encountered invalid terminal `Cdecomp' attribute value\0"
    "Terminal splitting styles must have identical splitting instructions for all primary detail subbands (i.e., identical colon-separated sub-strings), in each of which all 2-bit splitting codes must be identical (i.e., sub-strings must consist of identical characters from the set, `-', `H', `V' and `B'.  The only exception to this rule is that where each primary subband is split only once, in which case it is sufficient for all primary subbands to be split once in the same direction (i.e., all `-', all `H--', all `V--' or all `B----').  These rules derive from the way in which Part-2 of the JPEG2000 standard extrapolates information found in ADS and DFS marker segments.\0"
  },
  {
    "W(block_decoder.cpp)", 0,
    "Kakadu Core Warning:\n",
    "One or more corrupted block bit-streams detected.\n\0"
  },
  {
    "W(codestream.cpp)", 0,
    "Kakadu Core Warning:\n",
    "Skipping over corrupt SOP marker code!\0"
  },
  {
    "W(codestream.cpp)", 1,
    "Kakadu Core Warning:\n",
    "Skipping over corrupt SOT marker code!\0"
  },
  {
    "W(codestream.cpp)", 2,
    "Kakadu Core Warning:\n",
    "Disregarding non-terminal EOC marker.\0"
  },
  {
    "W(codestream.cpp)", 5,
    "Kakadu Core Warning:\n",
    "TLM marker segments contain one or more illegal lengths (< 14 bytes).  Proceeding with incomplete tile-part length information.\0"
  },
  {
    "W(codestream.cpp)", 8,
    "Kakadu Core Warning:\n",
    "Profile violation detected (code-stream is technically illegal).  In a Profile-0 code-stream, the first progression specification found in the first POC marker segment of the main or any tile header may not describe a progression which starts from resolution or component indices other than 0.\0"
  },
  {
    "W(codestream.cpp)", 9,
    "Kakadu Core Warning:\n",
    "Profile violation detected (code-stream is technically illegal).  Profile-0 code-streams must either be untiled or else the tile dimensions must be exactly 128x128.  Try setting \"Sprofile\" to 1 or 2 or avoid using tiles.\0"
  },
  {
    "W(codestream.cpp)", 10,
    "Kakadu Core Warning:\n",
    "Profile violation detected (code-stream is technically illegal).  Profile-0 code-streams must have image and tiling origins (anchor points) set to zero.  Try setting \"Sprofile\" to 1 or 2.\0"
  },
  {
    "W(codestream.cpp)", 11,
    "Kakadu Core Warning:\n",
    "Profile violation detected (code-stream is technically illegal).  Component sub-sampling factors for Profile-0 code-streams are restricted to the values 1, 2 and 4.  Try setting \"Sprofile\" to 1 or 2.\0"
  },
  {
    "W(codestream.cpp)", 12,
    "Kakadu Core Warning:\n",
    "Profile violation detected (code-stream is technically illegal).  Profile-1 code-streams must either be untiled or else the horizontal and vertical tile dimensions must be identical (square tiles on the hi-res canvas).  You might like to set \"Sprofile\" to 2 or avoid using tiles.\0"
  },
  {
    "W(codestream.cpp)", 13,
    "Kakadu Core Warning:\n",
    "Profile violation detected (code-stream is technically illegal).  If a Profile-1 code-stream is tiled (has multiple tiles), the width and height of its tiles, projected onto any given image component, may not exceed 1024.  You might like to set \"Sprofile\" to 2 or avoid using tiles.\0"
  },
  {
    "W(codestream.cpp)", 14,
    "Kakadu Core Warning:\n",
    "Profile violation detected (code-stream is technically illegal).  PPM marker segments may not appear within a Profile-0 code-stream.  You should set \"Sprofile\" to 1 or 2.\0"
  },
  {
    "W(codestream.cpp)", 16,
    "Kakadu Core Warning:\n",
    "Unable to generate the TLM marker segments requested via the `ORGgen_tlm' parameter attribute.  The reason for this is that the total number of tile-parts whose lengths would need to be represented exceeds the amount of data which can legally be stored in the maximum allowable 256 TLM marker segments, allowing for 6 bytes per tile-part length value.\0"
  },
  {
    "W(codestream.cpp)", 17,
    "Kakadu Core Warning:\n",
    "Unable to generate the TLM marker segments requested via the `ORGgen_tlm' parameter attribute.  The reason for this is that the logical compressed data target supplied by the application does not appear to support rewriting (i.e., seeking).  We need this to reserve space for the TLM marker segments up front and later overwrite the reserved space with valid tile-part lengths.\0"
  },
  {
    "W(codestream.cpp)", 100865537,
    "Kakadu Core Warning:\n",
    "Source does not support seeking, yet while parsing the main codestream header, critical marker segments that might provide global codestream information for the `siz_params' marker segment were not found all together up front.  This may or may not prove to be a problem.\0"
  },
  {
    "W(codestream.cpp)", 101779457,
    "Kakadu Core Warning:\n",
    "Call to `kdu_codestream_comment::put_text' leaves the total length of the codestream comment greater than 65531, which is the longest comment that can be represented in a COM marker segment in the codestream.  Comment is being truncated.\0"
  },
  {
    "W(codestream.cpp)", 134288129,
    "Kakadu Core Warning:\n",
    "With incremental codestream flushing, you cannot currently expect the supplied `Creslengths' constraints to be applied correctly -- this weakness can be corrected in the future if there is a good reason for wanting both features to work together.\0"
  },
  {
    "W(codestream.cpp)", 805636353,
    "Kakadu Core Warning:\n",
    "Call to `kdu_codestream_comment::put_data' leaves the total length of the codestream comment greater than 65531, which is the longest comment that can be represented in a COM marker segment in the codestream.  Comment is being truncated.\0"
  },
  {
    "W(compressed.cpp)", 0,
    "Kakadu Core Warning:\n",
    "Profile violation detected (code-stream is technically illegal).  Profile-0 code-streams must have nominally square code-block dimensions, measuring 32x32 or 64x64.  You should set \"Sprofile\" to 1 or 2.\0"
  },
  {
    "W(compressed.cpp)", 1,
    "Kakadu Core Warning:\n",
    "Profile violation detected (code-stream is technically illegal).  Profile-0 code-streams may not use the BYPASS, RESET or CAUSAL block coder mode switches.  You should set \"Sprofile\" to 1 or 2.\0"
  },
  {
    "W(compressed.cpp)", 2,
    "Kakadu Core Warning:\n",
    "Profile violation detected (code-stream is technically illegal).  Profile-1 code-streams may not have code-block dimensions larger than 64.  You should set \"Sprofile\" to 2.\0"
  },
  {
    "W(compressed.cpp)", 3,
    "Kakadu Core Warning:\n",
    "Profile violation detected (code-stream is technically illegal).  Part-1 code-streams must have their coding origin (anchor point) set to 0.  A non-zero coding origin is legal only in JPEG2000 Part 2; set `Sprofile=PART2' to avoid this warning message.\0"
  },
  {
    "W(compressed.cpp)", 4,
    "Kakadu Core Warning:\n",
    "Profile violation detected (code-stream is technically illegal).  Profile-0 and Profile-1 code-streams must have sufficient DWT levels to permit extraction of a low resolution image which is no larger than 128x128.   Try setting a larger value for \"Clevels\" or else set \"Sprofile\" to 2.\0"
  },
  {
    "W(compressed.cpp)", 5,
    "Kakadu Core Warning:\n",
    "Profile violation detected (code-stream is technically illegal).  Profile-0 code-streams may have multiple precincts only in those tile-component resolutions whose dimensions are greater than 128x128.\0"
  },
  {
    "W(compressed.cpp)", 6,
    "Kakadu Core Warning:\n",
    "Profile violation detected (code-stream is technically illegal).  The \"Rshift\" attribute may not exceed 37, except in Profile-2 (the unrestricted profile).\0"
  },
  {
    "W(compressed.cpp)", 7,
    "Kakadu Core Warning:\n",
    "Profile violation detected (code-stream is technically illegal).  Profile-0 and Profile-1 code-streams must have sufficient DWT levels to permit extraction of a low resolution image which is no larger than 128x128.   Try setting a larger value for \"Clevels\" or else set \"Sprofile\" to 2.\0"
  },
  {
    "W(compressed.cpp)", 8,
    "Kakadu Core Warning:\n",
    "Profile violation detected (code-stream is technically illegal).  Profile-0 code-streams may have multiple precincts only in those tile-component resolutions whose dimensions are greater than 128x128.\0"
  },
  {
    "W(compressed.cpp)", 9,
    "Kakadu Core Warning:\n",
    "Profile violation detected (code-stream is technically illegal).  PPT marker segments may not appear within a Profile-0 code-stream.  You should set \"Sprofile\" to 1 or 2.\0"
  },
  {
    "W(compressed.cpp)", 10,
    "Kakadu Core Warning:\n",
    "Profile violation detected (code-stream is technically illegal).  In a Profile-0 code-stream, all first tile-parts of all tiles must appear first, in exactly the same order as their respective tile numbers.\0"
  },
  {
    "W(compressed.cpp)", 83953410,
    "Kakadu Core Warning:\n",
    "Profile violation detected (code-stream is technically illegal).  The \"Rshift\" attribute may not exceed 37, except in Profile-2 (the unrestricted profile).\0"
  },
  {
    "W(compressed.cpp)", 538055169,
    "Kakadu Core Warning:\n",
    "Profile violation detected (code-stream is technically illegal).  In a Profile-0 code-stream, all first tile-parts of all tiles must appear first, in exactly the same order as their respective tile numbers.\0"
  },
  {
    "W(encoder.cpp)", 0,
    "Kakadu Core Warning:\n",
    "The ROI shift (`Rshift' attribute) which you are using is too large to ensure truly lossless recovery of both the foreground and the background regions, at least by Kakadu -- other compliant implementations may give up much earlier.  You might like to consider using the `Rweight' attribute instead of `Rshift' -- a 32x32 code-block size (not the default) is recommended in this case and `Rweight' should be set to around 2 to the power of the `Rshift' value you would have used.\0"
  },
  {
    "W(params.cpp)", 0,
    "Kakadu Core Warning:\n",
    "Profile violation detected (code-stream is technically illegal).  COD/COC marker segments may only appear in the main header of a Profile-0 code-stream.  You should set \"Sprofile\" to 1 or 2.  Problem detected in tile \0"
  },
  {
    "W(params.cpp)", 3,
    "Kakadu Core Warning:\n",
    "Profile violation detected (code-stream is technically illegal).  COD/COC marker segments may only appear in the main header of a Profile-0 code-stream.  You should set \"Sprofile\" to 1 or 2.  Problem detected in tile \0"
  },
  {
    "W(params.cpp)", 4,
    "Kakadu Core Warning:\n",
    "Profile violation detected (code-stream is technically illegal).  QCD/QCC marker segments may only appear in the main header of a Profile-0 code-stream.  You should set \"Sprofile\" to 1 or 2.  Problem detected in tile \0"
  },
  {
    "W(params.cpp)", 5,
    "Kakadu Core Warning:\n",
    "Profile violation detected (code-stream is technically illegal).  QCD/QCC marker segments may only appear in the main header of a Profile-0 code-stream.  You should set \"Sprofile\" to 1 or 2.  Problem detected in tile \0"
  },
  {
    "W(params.cpp)", 8,
    "Kakadu Core Warning:\n",
    "Up-shift values in the RGN marker segment should not need to exceed 37 under any circumstances.  The use of a larger value, \0"
    " in this case, may cause problems.\0"
  },
  {
    "W(params.cpp)", 268506625,
    "Kakadu Core Warning:\n",
    "NLT marker segment found in code-stream that does not advertise the presence of non-linear point transform features via the relevant extensions flag in the Rsiz member of the SIZ marker segment.  NLT specifications will be ignored.\0"
  },
  {
    "W(params.cpp)", 268506626,
    "Kakadu Core Warning:\n",
    "Tile-specific component bit-depth/signed specification encountered in NLT marker segment is not compatibile with the bith-depth/signed information deduced from the main codestream header -- this is not strictly illegal, but would clearly break most applications.  Forcing consistency, which may alter the decoded result.\0"
  },
  {
    "W(params.cpp)", 286328848,
    "Kakadu Core Warning:\n",
    "Code-stream profile had to be changed from a digital cinema, broadcast or IMF profile to a PART2 profile, since one or more PART2 features have been used.\0"
  },
  {
    "W(params.cpp)", 286328864,
    "Kakadu Core Warning:\n",
    "Profile violation may occur without noticing, since you have requested Digital Cinema profile CINEMA2K, CINEMA4K, CINEMA2S or CINEMA4S, without providing a `Creslengths' attribute.  The latter is generally required to be sure that the compressed lengths of resolution/component subsets conform to the tight Digital Cinema prescription.  The actual allowed sizes depend upon the projected frame rate, so are not enforced internally.  By way of example, you can generate a legal CINEMA2K codestream for 24 fps by supplying \"Creslengths=1302083\" together with \"Creslengths:Cn=1041666\" replacing n=0,1,2.  For 48 fps, use 651041 and 520833 instead.  For a CINEMA4K codestream at 24 fps, use \"Creslengths=1302083\", together with \"Creslenths:Cn=1302083,1041666\", with the same replacements for 48 fps.  For a CINEMA2S codestream at, 48fps, use \"Creslengths=651041,0,1302083\" and \"Creslengths:Cn=1520833,0,104166.  For more examples, see the Kakadu \"Usage_Examples.txt\" file and be sure to read the official size constraints defined for the Digital Cinema profile that is of interest to you.\0"
  },
  {
    "W(params.cpp)", 386077187,
    "Kakadu Core Warning:\n",
    "Codestream contains unrecognized capability extensions found in a `CAP' marker segment; moreover, the `Scap' attribute flag is recorded in the `SIZ' marker segment.  It is likely that we will not be able to decode this codestream correctly.\0"
  },
  {
    "W(params.cpp)", 420025091,
    "Kakadu Core Warning:\n",
    "Profile violation detected.  The Scalable Digital Cinema profiles CINEMA2S and CINEMA4S expect exactly two (2) quality layers (i.e., Clayers should strictly be 2).  Letting it go for now, since you could strip the extra quality layers later on to make it legal.\0"
  },
  {
    "W(params.cpp)", 420025092,
    "Kakadu Core Warning:\n",
    "Profile violation detected.  The Scalable Digital Cinema \"long term storage\" profile CINEMASS expects at most 5 quality layers (i.e., Clayers should strictly be less than 6).  Letting it go for now, since you could strip the extra quality layers later on to make it legal.\0"
  },
  {
    "W(params.cpp)", 554242817,
    "Kakadu Core Warning:\n",
    "Profile violation detected.  The \"long term storage\" cinema profile requires EPH markers and SOP marker segments to be included in the code-stream.  Letting this go for now, since you could add these in later.\0"
  },
  {
    "W(params.cpp)", 554242818,
    "Kakadu Core Warning:\n",
    "Profile violation detected.  Neither EPH markers nor SOP marker segments may be used with Digital Cinema profiles CINEMA2K, CINEMA4K, CINEMA2S and CINEMA4S, or with a BROADCAST profile.  Letting this go for now, since you could remove these later.\0"
  },
  {
    "W(params.cpp)", 554242820,
    "Kakadu Core Warning:\n",
    "Profile violation detected.  Code-streams marked with one of the scalable digital cinema profiles CINEMA2S, CINEMA4S or CINEMASS are required to have PLT marker segments in each tile-part header, yet it appears that you have explicitly disabled this.  Letting this go for now, since you may be intending to add these marker segments back in yourself later.\0"
  },
  {
    "W(params.cpp)", 637800449,
    "Kakadu Core Warning:\n",
    "Profile violation detected.  Code-streams marked with a Digital Cinema profile (CINEMA2K, CINEMA4K, CINEMA2S, CINEMA4S or CINEMASS), a BROADCAST or an IMF profile must have tile-parts generated according to the \"ORGtparts=C\" flavour.  Letting this go for now, since you may be intending to reorganize tile-parts yourself later on.\0"
  },
  {
    "W(params.cpp)", 637800454,
    "Kakadu Core Warning:\n",
    "Profile violation detected.  The Digital Cinema profiles CINEMA2K and CINEMA4K and the BROADCAST and IMF profiles do not strictly allow the use of multiple quality layers (i.e., Clayers should strictly be 1).  Letting it go for now, since you could strip the extra quality layers later on to make it legal.\0"
  }
};

static bool dummy_val = kdl_register_text(data,368);

#ifndef KDU_EXCLUDE_DEVELOPER_TEXT

static kdl_message_info dev_data[204] = {
  {
    "E(codestream.cpp)", 0,
    "Kakadu Core Error:\n",
    "Attempting to load cached tile header data from a compressed data source which does not appear to support caching.  It is possible that the source has been incorrectly implemented.\0"
  },
  {
    "E(codestream.cpp)", 1,
    "Kakadu Core Error:\n",
    "Attempting to load cached precinct packets from a compressed data source which does not appear to support caching.  It is possible that the source has been incorrectly implemented.\0"
  },
  {
    "E(codestream.cpp)", 2,
    "Kakadu Core Error:\n",
    "Attempting to seek inside a compressed data source which does not appear to support seeking.  The source may have been implemented incorrectly.\0"
  },
  {
    "E(codestream.cpp)", 11,
    "Kakadu Core Error:\n",
    "Attempting to invoke `kd_tlm_generator::write_final_tlms' with a compressed data target which does not support repositioning.\0"
  },
  {
    "E(codestream.cpp)", 32,
    "Kakadu Core Error:\n",
    "The fragment region supplied to `kdu_codestream::create' is empty.\0"
  },
  {
    "E(codestream.cpp)", 33,
    "Kakadu Core Error:\n",
    "The fragment region supplied to `kdu_codestream::create' represents too many tiles, allowing for the number of tiles indicated for previously generated fragments.\0"
  },
  {
    "E(codestream.cpp)", 34,
    "Kakadu Core Error:\n",
    "You must close all open tile interfaces before calling `kdu_codestream::restart'.\0"
  },
  {
    "E(codestream.cpp)", 36,
    "Kakadu Core Error:\n",
    "You cannot use PPM or PPT marker segments (packed packet headers) with cached compressed data sources.\0"
  },
  {
    "E(codestream.cpp)", 37,
    "Kakadu Core Error:\n",
    "Attempting to run rate-control simulation on a precinct for which one or more packets have already been written to the code-stream.  Problem is most likely caused by trying to use the incremental code-stream flushing feature with one of the progression orders, LRCP or RLCP.\0"
  },
  {
    "E(codestream.cpp)", 38,
    "Kakadu Core Error:\n",
    "Using the `kdu_codestream::generate_codestream' function in an illegal manner.  The `max_layers' argument may not exceed the maximum number of layers which are being sized.  The problem may have arisen from an incorrect use of the incremental code-stream flushing capability.\0"
  },
  {
    "E(codestream.cpp)", 41,
    "Kakadu Core Error:\n",
    "You may not use the `kdu_codestream::restart' function unless `kdu_codestream::enable_restart' was called after the code-stream management machinery was first created.\0"
  },
  {
    "E(codestream.cpp)", 42,
    "Kakadu Core Error:\n",
    "You may not use the output form of `kdu_codestream::restart' if the code-stream management machinery was originally created using anything other than the output form of `kdu_codestream::create'.\0"
  },
  {
    "E(codestream.cpp)", 43,
    "Kakadu Core Error:\n",
    "You may not use the `kdu_codestream::restart' function unless `kdu_codestream::enable_restart' was called after the code-stream management machinery was first created.\0"
  },
  {
    "E(codestream.cpp)", 44,
    "Kakadu Core Error:\n",
    "You may not use the input form of `kdu_codestream::restart' if the code-stream management machinery was originally created using anything other than the input form of `kdu_codestream::create'.\0"
  },
  {
    "E(codestream.cpp)", 47,
    "Kakadu Core Error:\n",
    "You cannot use the `kdu_codestream::share_buffering' function if the codestream object which will be sharing another codestream's buffering has already allocated some internal resources.\0"
  },
  {
    "E(codestream.cpp)", 48,
    "Kakadu Core Error:\n",
    "You may not call `kdu_codestream::enable_restart' after opening the first tile.\0"
  },
  {
    "E(codestream.cpp)", 49,
    "Kakadu Core Error:\n",
    "You may only set the codestream object into its \"persistent\" mode prior to opening the first tile.\0"
  },
  {
    "E(codestream.cpp)", 51,
    "Kakadu Core Error:\n",
    "\"kdu_codestream::set_max_bytes\" may not be called multiple times.\0"
  },
  {
    "E(codestream.cpp)", 52,
    "Kakadu Core Error:\n",
    "The `kdu_codestream::apply_input_restrictions' function may not be invoked on codestream objects opened for output (i.e. for compression).\0"
  },
  {
    "E(codestream.cpp)", 53,
    "Kakadu Core Error:\n",
    "You may apply restrictions to the resolution or number of image components only after closing all open tiles.\0"
  },
  {
    "E(codestream.cpp)", 54,
    "Kakadu Core Error:\n",
    "You may not apply restrictions to the resolution or number of image components after the first tile access, unless the codestream object is set up to be persistent.\0"
  },
  {
    "E(codestream.cpp)", 55,
    "Kakadu Core Error:\n",
    "The range of apparent image components supplied to `kdu_codestream::apply_input_restrictions' is empty or illegal!\0"
  },
  {
    "E(codestream.cpp)", 56,
    "Kakadu Core Error:\n",
    "You may change the apparent geometry of the code-stream only after closing all open tiles.\0"
  },
  {
    "E(codestream.cpp)", 57,
    "Kakadu Core Error:\n",
    "You may not change the apparent geometry of the code-stream after the first tile access, unless the codestream object is set up to be persistent.\0"
  },
  {
    "E(codestream.cpp)", 58,
    "Kakadu Core Error:\n",
    "Attempting to open a tile which has already been discarded or permanently closed!\0"
  },
  {
    "E(codestream.cpp)", 59,
    "Kakadu Core Error:\n",
    "When generating code-stream output incrementally, each call to `kdu_codestream::flush' or `kdu_codestream::auto_flush' must provide the same number of quality layer specifications.\0"
  },
  {
    "E(codestream.cpp)", 34084097,
    "Kakadu Core Error:\n",
    "`siz_params' failed to translate marker segment \0"
    " that provides critical global codestream information.\0"
  },
  {
    "E(codestream.cpp)", 67637505,
    "Kakadu Core Error:\n",
    "A serious problem has occurred during memory allocation within the core codestream machinery; it seems that you must have accessed shared memory from multiple threads without passing `kdu_thread_env' references into the appropriate functions offered by `kdu_codestream' and its descendants.\0"
  },
  {
    "E(codestream.cpp)", 67637506,
    "Kakadu Core Error:\n",
    "Multi-threaded implementation error detected.  Before passing a `kdu_thread_env' reference into any of the `kdu_codestream' machinery's interface functions you need to pass a `kdu_thread_env' reference into one of the top-level interface functions that configures the codestream for multi-threaded processing.  The main functions of this form are `kdu_codestream::create' and `kdu_codestream::open_tile', although there are others which can see a `kdu_thread_env' environment for the first time.\0"
  },
  {
    "E(codestream.cpp)", 84477184,
    "Kakadu Core Error:\n",
    "The range of apparent output image components supplied to `kdu_codestream::apply_input_restrictions' is empty or illegal!\0"
  },
  {
    "E(codestream.cpp)", 101779713,
    "Kakadu Core Error:\n",
    "The fragment region supplied to `kdu_codestream::create' is not correctly aligned with its left and upper edges on a tile boundary (or the image boundary).\0"
  },
  {
    "E(codestream.cpp)", 101779714,
    "Kakadu Core Error:\n",
    "The fragment region supplied to `kdu_codestream::create' is not correctly aligned with its right and lower edges on a tile boundary (or the image boundary).\0"
  },
  {
    "E(codestream.cpp)", 268506626,
    "Kakadu Core Error:\n",
    "The `siz_params' object does not seem to have been finalized properly -- valid `Mprecision'/`Msigned' parameters could not be recovered.  Have you forgotten to invoke `kdu_params::finalize_all'?\0"
  },
  {
    "E(codestream.cpp)", 268506627,
    "Kakadu Core Error:\n",
    "The `siz_params' object does not seem to have been finalized properly -- valid `Nprecision'/`Nsigned' parameters could not be recovered.  Have you forgotten to invoke `kdu_params::finalize_all'?\0"
  },
  {
    "E(codestream.cpp)", 268964097,
    "Kakadu Core Error:\n",
    "Multi-threaded implementation error detected.  All `kdu_thread_env' references used in calls to a `kdu_codestream' object's interface functions (including those of its descendant objects such as `kdu_tile', `kdu_subband' and so forth) must all belong to a single thread group.\0"
  },
  {
    "E(codestream.cpp)", 285808129,
    "Kakadu Core Error:\n",
    "The `kdu_codestream::add_flush_stats' function may only be used once, and then only prior to the first `open_tile' call.  Moreover, the function may only be used with codestreams created for output -- i.e., compression.\0"
  },
  {
    "E(codestream.cpp)", 302585350,
    "Kakadu Core Error:\n",
    "The `kdu_codestream::attach_flush_stats' function may only be used once, and then only prior to the first `open_tile' call.  Moreover, you may only attach a `kdu_flush_stats' object from another codestream to a `kdu_codestream' interface that already has its own one -- i.e., the target object must have had `kdu_codestream::add_flush_stats' invoked already.\0"
  },
  {
    "E(codestream.cpp)", 302585351,
    "Kakadu Core Error:\n",
    "The `kdu_codestream::attach_flush_stats' can only be used to share flush statistics between two `kdu_codestream' interfaces that have been created with consistent coding parameters.  In particular, the number of tiles, components and so forth must all be identical.\0"
  },
  {
    "E(codestream.cpp)", 302585352,
    "Kakadu Core Error:\n",
    "Calls to `kdu_codestream::attach_flush_stats' must precede the generation of content in either of the `kdu_codestream' objects that are involved in the sharing of flush statistics.\0"
  },
  {
    "E(codestream.cpp)", 302585353,
    "Kakadu Core Error:\n",
    "Calling `kdu_flush_stats::advance', perhaps indirectly via `kdu_codestream::restart', with auto-advance enabled, before codestream flushing has completed for the associated codestream!\0"
  },
  {
    "E(codestream.cpp)", 302585360,
    "Kakadu Core Error:\n",
    "`kdu_flush_stats::advance' requires a positive `frame_sep' argument.\0"
  },
  {
    "E(codestream.cpp)", 302585361,
    "Kakadu Core Error:\n",
    "`kdu_flush_stats::auto_advance' requires a positive `frame_sep' argument.\0"
  },
  {
    "E(codestream.cpp)", 302585363,
    "Kakadu Core Error:\n",
    "The `kdu_flush_stats::advance' function should not be explicitly called if a non-zero auto-advance value has already been configured via `kdu_flush_set::auto_advance'.\0"
  },
  {
    "E(codestream.cpp)", 352916993,
    "Kakadu Core Error:\n",
    "Something is seriously wrong with the handling of bulk-fill by `kd_precinct::simulate_packet_cbr'.\0"
  },
  {
    "E(codestream.cpp)", 352916994,
    "Kakadu Core Error:\n",
    "Crazy outcome from the simulation of bulk fill/spacer bytes.  Headroom of 1024 bytes is not enough to accommodate packet header costs associated with the introduction of fill bytes.  This makes no sense, unless the flush sets implied by the `Scbr' attribute's parameters contain many thousands of precinct each!\0"
  },
  {
    "E(codestream.cpp)", 352916995,
    "Kakadu Core Error:\n",
    "Inconsistency detected between simulated and actually written primary bulk fill bytes!\0"
  },
  {
    "E(codestream.cpp)", 352916996,
    "Kakadu Core Error:\n",
    "Inconsistency detected between simulated and actually written secondary bulk fill bytes!\0"
  },
  {
    "E(codestream.cpp)", 352916997,
    "Kakadu Core Error:\n",
    "Inconsistency detected between reported and actually written packet bytes within a flush-set!\0"
  },
  {
    "E(codestream.cpp)", 369692929,
    "Kakadu Core Error:\n",
    "Something is seriously wrong; a background codestream processing job is being scheduled, when the background processing queue for this codestream already identifies itself as `all_done'.  It looks like you must have issued a global (not queue specific) call to `kdu_thread_entity::join' or `kdu_thread_entity::terminate' and then gone back to do multi-threaded processing work with the codestream (perhaps following a `kdu_codestream::restart' call).  This is OK so long as you first call `kdu_thread_env::cs_terminate'.\0"
  },
  {
    "E(codestream.cpp)", 553915394,
    "Kakadu Core Error:\n",
    "Calling `kdu_codestream::restart' while another thread is still waiting for a tile in the original codestream to be opened!!  This is clearly a problem since restarting a codestream is conceputally equivalent to destroying and recreating it.\0"
  },
  {
    "E(codestream.cpp)", 604247041,
    "Kakadu Core Error:\n",
    "Attempting to wait for a background tile opening operation inside `kdu_codestream::access_tile', while another thread appears to be concurrently waiting upon the same condition -- see API docs for an explanation!\0"
  },
  {
    "E(codestream.cpp)", 604574469,
    "Kakadu Core Error:\n",
    "Illegal component index supplied in call to `kdu_codesteram::get_dims'.\0"
  },
  {
    "E(codestream.cpp)", 604574470,
    "Kakadu Core Error:\n",
    "Illegal component index supplied in call to `kdu_codesteram::map_region'.\0"
  },
  {
    "E(codestream.cpp)", 621024258,
    "Kakadu Core Error:\n",
    "Attempting to use access a tile which has already been discarded or permanently closed!\0"
  },
  {
    "E(codestream.cpp)", 637801474,
    "Kakadu Core Error:\n",
    "You must pass a non-NULL `env' argument to the `kdu_codestream::apply_input_restrictions' function if there are tiles that have been scheduled for background closure processing unless `cs_terminate' is called first.\0"
  },
  {
    "E(codestream.cpp)", 637801475,
    "Kakadu Core Error:\n",
    "You must pass a non-NULL `env' argument to the `kdu_codestream::change_appearance' function if there are tiles that have been scheduled for background closure processing unless `cs_terminate' is called first.\0"
  },
  {
    "E(codestream.cpp)", 654381569,
    "Kakadu Core Error:\n",
    "Attempting to invoke `kdu_codestream::flush' with a NULL `env' argument (i.e., without multi-threaded protection) without first using `kdu_thread_env::cs_terminate' to terminate background processing within the codestream machinery.  This error is most likely caused by a transition to Kakadu v7 without proper attention to the use of the new `cs_terminate' function.  See the demo applications for examples of its use.\0"
  },
  {
    "E(codestream.cpp)", 654381570,
    "Kakadu Core Error:\n",
    "Attempting to invoke `kdu_codestream::trans_out' with a NULL `env' argument (i.e., without multi-threaded protection) without first using `kdu_thread_env::cs_terminate' to terminate background processing within the codestream machinery.  This error is most likely caused by a transition to Kakadu v7 without proper attention to the use of the new `cs_terminate' function.  See the demo applications for examples of its use.\0"
  },
  {
    "E(codestream.cpp)", 654381571,
    "Kakadu Core Error:\n",
    "Attempting to invoke `kdu_codestream::ready_for_flush' with a NULL `env' argument (i.e., without multi-threaded protection) without first using `kdu_thread_env::cs_terminate' to terminate background processing within the codestream machinery.  This error is most likely caused by a transition to Kakadu v7 without proper attention to the use of the new `cs_terminate' function.  See the demo applications for examples of its use.\0"
  },
  {
    "E(codestream.cpp)", 671421441,
    "Kakadu Core Error:\n",
    "The core system was compiled with sample alignment constraints that are incompatible with those expected by the application, or another linked library.  You are receiving this error because a dangerous condition has arise due to changes in sample alignment constants such as `KDU_ALIGN_SAMPLE16' between the point at which the core system was compiled and the point at which another dependent element was compiled.  For debugging purposes, the call to `kdu_core_sample_alignment_checker' has been invoked with:\n\t\0"
  },
  {
    "E(compressed.cpp)", 19,
    "Kakadu Core Error:\n",
    "Attempting to access a non-existent resolution level within some tile-component.  Problem almost certainly caused by trying to discard more resolution levels than the number of DWT levels used to compress a tile-component.\0"
  },
  {
    "E(compressed.cpp)", 21,
    "Kakadu Core Error:\n",
    "Calls to `kdu_resolution::open_precinct' are permitted only with interchange codestream objects (i.e., those which have neither a compressed data source nor a compressed data target).\0"
  },
  {
    "E(compressed.cpp)", 22,
    "Kakadu Core Error:\n",
    "The precinct you are trying to access via `kdu_resolution::get_precinct_packets' is no longer available, probably because you already fully accessed its visible contents, causing it to be recycled.\0"
  },
  {
    "E(compressed.cpp)", 23,
    "Kakadu Core Error:\n",
    "You are permitted to open each code-block only once from an open tile before closing that tile.  If the codestream object is marked as persistent, you may re-open code-blocks only after re-opening their containing tiles.\0"
  },
  {
    "E(compressed.cpp)", 24,
    "Kakadu Core Error:\n",
    "Attempting to open the same code-block more than once for writing!\0"
  },
  {
    "E(compressed.cpp)", 37,
    "Kakadu Core Error:\n",
    "You may not currently flush compressed code-stream data without completing the compression of all code-blocks in all precincts of all tiles.\0"
  },
  {
    "E(compressed.cpp)", 38,
    "Kakadu Core Error:\n",
    "Attempting to open the same code-block more than once for writing!\0"
  },
  {
    "E(compressed.cpp)", 17110018,
    "Kakadu Core Error:\n",
    "The `ORGtpart_interrupts' attribute expects tile-part interruption bounds in the range 0 to 254 -- other values are not meaningful, given that no J2K tile may have more than 255 parts.\0"
  },
  {
    "E(compressed.cpp)", 17307137,
    "Kakadu Core Error:\n",
    "You may not currently flush compressed code-stream data without completing the compression of all code-blocks in all precincts of all tiles.\0"
  },
  {
    "E(compressed.cpp)", 285544961,
    "Kakadu Core Error:\n",
    "invoked on an invalid `kdu_tile' interface.  It looks like the underlying tile has already been closed.\0"
  },
  {
    "E(compressed.cpp)", 336139009,
    "Kakadu Core Error:\n",
    "You are permitted to open each code-block only once from an open tile before closing that tile.\0"
  },
  {
    "E(compressed.cpp)", 386204928,
    "Kakadu Core Error:\n",
    "Attempting to access a resolution level within some tile-component, while the codestream is in a geometrically flipped viewing condition, where a packet wavelet transform has been found to be incompatible with flipping.  This condition can be identified by calling `kdu_codestream::can_flip' first.\0"
  },
  {
    "E(compressed.cpp)", 403117057,
    "Kakadu Core Error:\n",
    "Incorrect use of the `hscan_length' and/or `hscan_start' arguments to `kdu_subband::open_block'.  After supplying a positive value for `hscan_length' each subsequent call must increment the `block_idx.x' argument and decrement the `hscan_length'.\0"
  },
  {
    "E(compressed.cpp)", 570692609,
    "Kakadu Core Error:\n",
    "Attempting to open a tile that has been scheduled for multi-threaded background opening wihtout providing a `kdu_thread_env' reference to make the open call thread-safe!\0"
  },
  {
    "E(decoder.cpp)", 318837250,
    "Kakadu Core Error:\n",
    "Memory allocation/assignment error in `kd_decoder::start'; pre-allocated memory block has different size to actual required memory block!  Compile and run in debug mode to catch this error.\0"
  },
  {
    "E(decoder.cpp)", 570953986,
    "Kakadu Core Error:\n",
    "Failed to create thread queue when constructing `kdu_decoder' object.  One possible cause is that the thread group might not have been created first using `kdu_thread_env::create', before passing its reference to `kdu_decoder', or an exception may have occurred.  Another possible (highly unlikely) cause is that too many thread working domains are in use.\0"
  },
  {
    "E(encoder.cpp)", 318837249,
    "Kakadu Core Error:\n",
    "Memory allocation/assignment error in `kd_encoder::start'; pre-allocated memory block has different size to actual required memory block!  Compile and run in debug mode to catch this error.\0"
  },
  {
    "E(encoder.cpp)", 570953987,
    "Kakadu Core Error:\n",
    "Failed to create thread queue when constructing `kdu_encoder' object.  One possible cause is that the thread group might not have been created first using `kdu_thread_env::create', before passing its reference to `kdu_encoder', or an exception might have occurred.  Another possible (highly unlikely) cause is that too many thread working domains are in use.\0"
  },
  {
    "E(kernels.cpp)", 1,
    "Kakadu Core Error:\n",
    "Illegal DWT kernel ID used to construct a `kdu_kernels' object.\0"
  },
  {
    "E(multi_transform.cpp)", 151523585,
    "Kakadu Core Error:\n",
    "Attempting to invoke `kdu_multi_analysis::exchange_line' on an object that was configured for asynchronous multi-threaded DWT processing, but without supplying a `kdu_thread_env' reference!\0"
  },
  {
    "E(multi_transform.cpp)", 151523586,
    "Kakadu Core Error:\n",
    "Attempting to invoke `kdu_multi_analysis::exchange_line' on an object that was configured for asynchronous multi-threaded DWT processing, but without supplying a `kdu_thread_env' reference!\0"
  },
  {
    "E(multi_transform.cpp)", 151523587,
    "Kakadu Core Error:\n",
    "Attempting to invoke `kdu_multi_synthesis::exchange_line' on an object that was configured for asynchronous multi-threaded DWT processing, but without supplying a `kdu_thread_env' reference!\0"
  },
  {
    "E(multi_transform.cpp)", 151523588,
    "Kakadu Core Error:\n",
    "Attempting to invoke `kdu_multi_synthesis::get_line' on an object that was configured for asynchronous multi-threaded DWT processing, but without supplying a `kdu_thread_env' reference!\0"
  },
  {
    "E(multi_transform.cpp)", 570953985,
    "Kakadu Core Error:\n",
    "Failed to create thread queue inside `kd_multi_transform::construct'.  Possible cause is that the thread group might not have been created first using `kdu_thread_env::create', before passing its reference to `kdu_multi_analysis' or `kdu_multi_synthesis'.  Another possible cause is that the super-queue passed into the relevant `create' function was not itself successfully added to the thread group first -- you should check the return return value from `kdu_thread_entity::attach_queue'.\0"
  },
  {
    "E(params.cpp)", 0,
    "Kakadu Core Error:\n",
    "Absolute quantization step sizes must be strictly positive.\0"
  },
  {
    "E(params.cpp)", 1,
    "Kakadu Core Error:\n",
    "String translators in code-stream attribute specifications must contain an '=' sign! Problem encountered at\0"
  },
  {
    "E(params.cpp)", 2,
    "Kakadu Core Error:\n",
    "String translators in code-stream attribute specifications may not exceed \0"
    " characters in length! Problem encountered at\0"
  },
  {
    "E(params.cpp)", 3,
    "Kakadu Core Error:\n",
    "String translators in code-stream attribute specifications must be identified with integers and correctly delimited! Problem encountered at\0"
  },
  {
    "E(params.cpp)", 4,
    "Kakadu Core Error:\n",
    "Attempting to write multiple records to a code-stream attribute\0"
    "\", which can accept only single attributes!\0"
  },
  {
    "E(params.cpp)", 5,
    "Kakadu Core Error:\n",
    "Illegal tile or component indices supplied to `kdu_params::link'.  Probably attempting to specialize a parameter object to a specific tile or component, where the parameter class in questions does not support tile or component diversity.\0"
  },
  {
    "E(params.cpp)", 6,
    "Kakadu Core Error:\n",
    "Call to `kdu_params::link' specifies a different number of tiles or components to the number with which the first parameter object of the same class was linked.\0"
  },
  {
    "E(params.cpp)", 7,
    "Kakadu Core Error:\n",
    "Call to `kdu_params::link' specifies the same cluster name, tile and component indices as an existing linked object, which does not support multiple instances.\0"
  },
  {
    "E(params.cpp)", 8,
    "Kakadu Core Error:\n",
    "Trying to use `kdu_params::copy_from' to copy an object to one which has been derived differently.\0"
  },
  {
    "E(params.cpp)", 9,
    "Kakadu Core Error:\n",
    "Trying to use `kdu_params::copy_from' to copy an object which is not a cluster head, or to copy to another object which is not the head of its cluster.\0"
  },
  {
    "E(params.cpp)", 10,
    "Kakadu Core Error:\n",
    "Illegal attempt to modify a `kdu_params' object which has already been marked!\0"
  },
  {
    "E(params.cpp)", 11,
    "Kakadu Core Error:\n",
    "Trying to use `kdu_params::copy_all' to copy an object to one which has been derived differently.\0"
  },
  {
    "E(params.cpp)", 12,
    "Kakadu Core Error:\n",
    "Trying to use `kdu_params::copy_all' to copy an object which is not a cluster head, or to copy to another object which is not the head of its cluster.\0"
  },
  {
    "E(params.cpp)", 13,
    "Kakadu Core Error:\n",
    "Illegal attempt to modify a `kdu_params' object which has already been marked!\0"
  },
  {
    "E(params.cpp)", 14,
    "Kakadu Core Error:\n",
    "Invalid `tile_idx' supplied to `kdu_params::check_typical_tile'.\0"
  },
  {
    "E(params.cpp)", 15,
    "Kakadu Core Error:\n",
    "Attempt to access a code-stream attribute using the invalid name\0"
  },
  {
    "E(params.cpp)", 16,
    "Kakadu Core Error:\n",
    "Attempt to access a code-stream attribute, with an invalid field index!\nThe attribute name is\0"
    "The field index is \0"
  },
  {
    "E(params.cpp)", 17,
    "Kakadu Core Error:\n",
    "Attempting to access a floating point code-stream attribute field with the integer access method!\nThe attribute name is\0"
  },
  {
    "E(params.cpp)", 18,
    "Kakadu Core Error:\n",
    "Attempt to access a code-stream attribute using the invalid name\0"
  },
  {
    "E(params.cpp)", 19,
    "Kakadu Core Error:\n",
    "Attempt to access a code-stream attribute, with an invalid field index!\nThe attribute name is\0"
    "The field index is \0"
  },
  {
    "E(params.cpp)", 20,
    "Kakadu Core Error:\n",
    "Attempting to access a non-boolean code-stream attribute field with the boolean access method!\nThe attribute name is\0"
  },
  {
    "E(params.cpp)", 21,
    "Kakadu Core Error:\n",
    "Attempt to access a code-stream attribute using the invalid name\0"
  },
  {
    "E(params.cpp)", 22,
    "Kakadu Core Error:\n",
    "Attempt to access a code-stream attribute, with an invalid field index!\nThe attribute name is\0"
    "The field index is \0"
  },
  {
    "E(params.cpp)", 23,
    "Kakadu Core Error:\n",
    "Attempting to access an integer code-stream parameter attribute field with the floating point access method!\nThe attribute name is\0"
  },
  {
    "E(params.cpp)", 24,
    "Kakadu Core Error:\n",
    "Attempt to set a code-stream attribute using the invalid name\0"
  },
  {
    "E(params.cpp)", 25,
    "Kakadu Core Error:\n",
    "Attempt to set a non-tile-specific code-stream attribute in a specific component!\nThe attribute name is\0"
  },
  {
    "E(params.cpp)", 26,
    "Kakadu Core Error:\n",
    "Attempt to set a code-stream attribute, with an invalid field index!\nThe attribute name is\0"
    "The field index is \0"
  },
  {
    "E(params.cpp)", 27,
    "Kakadu Core Error:\n",
    "Attempting to set a floating point code-stream parameter attribute field with the integer access method!\nThe attribute name is\0"
  },
  {
    "E(params.cpp)", 28,
    "Kakadu Core Error:\n",
    "Attempting to set a boolean code-stream parameter attribute field with an integer not equal to 0 or 1!\nThe attribute name is\0"
  },
  {
    "E(params.cpp)", 29,
    "Kakadu Core Error:\n",
    "Attempting to set a code-stream attribute field using an integer value which does not match any of the defined translation values for the field!\nThe attribute name is\0"
  },
  {
    "E(params.cpp)", 30,
    "Kakadu Core Error:\n",
    "Attempting to set a code-stream attribute field using an integer value which is incompatible with the flags defined for the field!\nThe attribute name is\0"
  },
  {
    "E(params.cpp)", 31,
    "Kakadu Core Error:\n",
    "Attempt to set a code-stream attribute using the invalid name\0"
  },
  {
    "E(params.cpp)", 32,
    "Kakadu Core Error:\n",
    "Attempt to set a non-tile-specific code-stream attribute in a specific component!\nThe attribute name is\0"
  },
  {
    "E(params.cpp)", 33,
    "Kakadu Core Error:\n",
    "Attempt to set a code-stream attribute, with an invalid field index!\nThe attribute name is\0"
    "The field index is \0"
  },
  {
    "E(params.cpp)", 34,
    "Kakadu Core Error:\n",
    "Attempting to set a non-boolean code-stream parameter attribute field with the boolean access method!\nThe attribute name is\0"
  },
  {
    "E(params.cpp)", 35,
    "Kakadu Core Error:\n",
    "Attempt to set a code-stream attribute using the invalid name\0"
  },
  {
    "E(params.cpp)", 36,
    "Kakadu Core Error:\n",
    "Attempt to set a non-tile-specific code-stream attribute in a specific component!\nThe attribute name is\0"
  },
  {
    "E(params.cpp)", 37,
    "Kakadu Core Error:\n",
    "Attempt to set a code-stream attribute, with an invalid field index!\nThe attribute name is\0"
    "The field index is \0"
  },
  {
    "E(params.cpp)", 38,
    "Kakadu Core Error:\n",
    "Attempting to set an integer code-stream parameter attribute field with the floating point access method!\nThe attribute name is\0"
  },
  {
    "E(params.cpp)", 39,
    "Kakadu Core Error:\n",
    "Invalid attribute name\0"
    "supplied to the `kdu_params::set_derived' function.\0"
  },
  {
    "E(params.cpp)", 44,
    "Kakadu Core Error:\n",
    "Illegal attempt to modify a `kdu_params' object which has already been marked!\0"
  },
  {
    "E(params.cpp)", 58,
    "Kakadu Core Error:\n",
    "Attempting to textualize a code-stream parameter attribute, which has only partially been set!\nError occurred in attribute\0"
    "in field \0"
    " of record \0"
  },
  {
    "E(params.cpp)", 59,
    "Kakadu Core Error:\n",
    "\"kdu_params::describe_attribute\" invoked with an invalid attribute identifier\0"
  },
  {
    "E(params.cpp)", 60,
    "Kakadu Core Error:\n",
    "Attempting to delete a non-existent attribute with \"kdu_params::delete_unparsed_attribute\".\0"
  },
  {
    "E(params.cpp)", 61,
    "Kakadu Core Error:\n",
    "Unable to copy SIZ parameters, unless all canvas coordinates are available.  Try using `siz_params::finalize' before attempting the copy.\0"
  },
  {
    "E(params.cpp)", 62,
    "Kakadu Core Error:\n",
    "Attempting to discard all of the components from an existing code-stream!\0"
  },
  {
    "E(params.cpp)", 64,
    "Kakadu Core Error:\n",
    "Unable to write SIZ marker segment yet!\0"
  },
  {
    "E(params.cpp)", 65,
    "Kakadu Core Error:\n",
    "Illegal number of image components! Must be in the range 1 to 16384.\0"
  },
  {
    "E(params.cpp)", 66,
    "Kakadu Core Error:\n",
    "Attempting to write geometrically transformed SIZ marker information without attaching and finalizing all tile-component COD marker information.  This is essential to establish canvas coordinate equivalence relationships.\0"
  },
  {
    "E(params.cpp)", 68,
    "Kakadu Core Error:\n",
    "Cannot write SIZ marker with illegal canvas coordinates.  The first tile is required to have a non-empty intersection with the image region on the canvas.\0"
  },
  {
    "E(params.cpp)", 70,
    "Kakadu Core Error:\n",
    "Unable to write SIZ marker segment! Precision or sub-sampling information missing for at least one component.\0"
  },
  {
    "E(params.cpp)", 71,
    "Kakadu Core Error:\n",
    "Illegal image sample bit-depth, \0"
    ". Legal range is from 1 to 38 bits per sample.\0"
  },
  {
    "E(params.cpp)", 72,
    "Kakadu Core Error:\n",
    "Illegal component sub-sampling factors, {\0"
    "}. Legal range is from 1 to 255.\0"
  },
  {
    "E(params.cpp)", 90,
    "Kakadu Core Error:\n",
    "Attempting to discard too many resolution levels!  Cannot discard more resolution levels than there are DWT levels.\0"
  },
  {
    "E(params.cpp)", 91,
    "Kakadu Core Error:\n",
    "Unable to write COD marker segment yet! Some info missing.  Perhaps you forgot to call `kdu_params::finalize_all'.\0"
  },
  {
    "E(params.cpp)", 92,
    "Kakadu Core Error:\n",
    "Illegal number of quality layers, \0"
  },
  {
    "E(params.cpp)", 93,
    "Kakadu Core Error:\n",
    "Illegal number of DWT levels, \0"
    ". Legal range is 0 to 32!\0"
  },
  {
    "E(params.cpp)", 95,
    "Kakadu Core Error:\n",
    "Maximum code-block dimensions must be powers of 2!\0"
  },
  {
    "E(params.cpp)", 96,
    "Kakadu Core Error:\n",
    "Maximum code-block dimensions must be no less than 4 and the maximum code-block area must not exceed 4096 samples!\0"
  },
  {
    "E(params.cpp)", 98,
    "Kakadu Core Error:\n",
    "No precinct dimensions supplied for COD/COC!\0"
  },
  {
    "E(params.cpp)", 99,
    "Kakadu Core Error:\n",
    "Precinct dimensions must be exact powers of 2!\0"
  },
  {
    "E(params.cpp)", 100,
    "Kakadu Core Error:\n",
    "Precinct dimensions may not exceed 2^15!\0"
  },
  {
    "E(params.cpp)", 110,
    "Kakadu Core Error:\n",
    "Cannot write QCD/QCC marker segment without first completing relevant COD/COC information!\0"
  },
  {
    "E(params.cpp)", 111,
    "Kakadu Core Error:\n",
    "Cannot write QCD/QCC marker segment yet! No info on guard bits.\0"
  },
  {
    "E(params.cpp)", 112,
    "Kakadu Core Error:\n",
    "Cannot write QCD/QCC marker segment yet!  Not clear whether quant steps are derived from the LL band step size.\0"
  },
  {
    "E(params.cpp)", 113,
    "Kakadu Core Error:\n",
    "Cannot write QCD/QCC marker segment without first completing all relevant COD/COC information!\0"
  },
  {
    "E(params.cpp)", 114,
    "Kakadu Core Error:\n",
    "Cannot write QCD/QCC marker segment yet!  Absolute reversible ranging information not available.\0"
  },
  {
    "E(params.cpp)", 115,
    "Kakadu Core Error:\n",
    "Cannot write QCD/QCC marker segment yet!  Absolute step size information not available.\0"
  },
  {
    "E(params.cpp)", 117,
    "Kakadu Core Error:\n",
    "Insufficient absolute ranging parameters available for writing QCD/QCC marker segment\0"
  },
  {
    "E(params.cpp)", 119,
    "Kakadu Core Error:\n",
    "Insufficient absolute quantization step size parameters available for writing QCD/QCC marker segment.\0"
  },
  {
    "E(params.cpp)", 129,
    "Kakadu Core Error:\n",
    "Information required to write POC marker segment is not currently complete!\0"
  },
  {
    "E(params.cpp)", 137,
    "Kakadu Core Error:\n",
    "Component registration information incomplete!\0"
  },
  {
    "E(params.cpp)", 268506625,
    "Kakadu Core Error:\n",
    "Unable to write NLT marker segment yet.  NLType value not in valid range.\0"
  },
  {
    "E(params.cpp)", 268506626,
    "Kakadu Core Error:\n",
    "Unable to write NLT marker segment yet.  NLTgamma parameters missing or not in the valid range of 0.0 to 256.0.\0"
  },
  {
    "E(params.cpp)", 268506627,
    "Kakadu Core Error:\n",
    "Unable to write NLT marker segment yet.  NLTlut parameters missing or invalid: need 0 <= Dmin < Dmax <= 1 and 2 <= N <= 8192 and 1 <= P <= 32.\0"
  },
  {
    "E(params.cpp)", 268506628,
    "Kakadu Core Error:\n",
    "Unable to write NLT marker segment yet.  NLTdata parameters missing -- you must supply at least as many parameters as is identified via the NLTlut attribute.\0"
  },
  {
    "E(params.cpp)", 268506629,
    "Kakadu Core Error:\n",
    "Unable to write NLT marker segment yet.  `Nprecision' and/or `Nsigned' attributes for the relevant component are not yet available.\0"
  },
  {
    "E(params.cpp)", 268506630,
    "Kakadu Core Error:\n",
    "Illegal precision for NLT marker generation, \0"
    "found in `Nprecision' attribute. Legal range is from 1 to 38 bits per sample.\0"
  },
  {
    "E(params.cpp)", 268506631,
    "Kakadu Core Error:\n",
    "Unable to access all `NLTdata' parameters required to write lookup-based NLT marker segment.\0"
  },
  {
    "E(params.cpp)", 268506643,
    "Kakadu Core Error:\n",
    "`NLTgamma' attribute missing or has invalid parameters, where `NLType' identifies a GAMMA mapping.  Valid `NLTgamma' parameters must lie in the half-open interval [0,256).\0"
  },
  {
    "E(params.cpp)", 268506644,
    "Kakadu Core Error:\n",
    "`NLTlut' attribute missing or has invalid parameters, where `NLType' identifies an LUT mapping.  Valid `NLTlut' parameters have 0 <= dmin,dmax <= 1, 2 <= N <= 8192 and 1 <= P <= 32.\0"
  },
  {
    "E(params.cpp)", 268506645,
    "Kakadu Core Error:\n",
    "`NLTdata' attribute missing or has invalid parameters, where `NLType' identifies an LUT mapping.  All data values must lie in the range 0.0 to 1.0.\0"
  },
  {
    "E(params.cpp)", 352392705,
    "Kakadu Core Error:\n",
    "Invalid use of the SMAG non-linear point transform type in the `NLType' attribute; use this type with signed sample data only (`Nsigned'=true).  Use UMAG with unsigned sample data.\0"
  },
  {
    "E(params.cpp)", 352392706,
    "Kakadu Core Error:\n",
    "Invalid use of the UMAG non-linear point transform type in the `NLType' attribute; use this type with unsigned sample data only (`Nsigned'=false).  Use SMAG with signed sample data.\0"
  },
  {
    "E(params.cpp)", 386077185,
    "Kakadu Core Error:\n",
    "Illegal `SCpart2_caps' attribute value.  Attribute must be an unsigned 16-bit flags word.\0"
  },
  {
    "E(params.cpp)", 419890433,
    "Kakadu Core Error:\n",
    "Illegal number of MCT output components, `Mcomponents'! Must be in the range 0 to 16384.\0"
  },
  {
    "E(params.cpp)", 419890434,
    "Kakadu Core Error:\n",
    "Unable to write CBD marker segment! Precision or signed/unsigned information missing for at least one MCT output component.\0"
  },
  {
    "E(params.cpp)", 419890435,
    "Kakadu Core Error:\n",
    "Illegal precision for MCT output component, \0"
    ". Legal range is from 1 to 38 bits per sample.\0"
  },
  {
    "E(params.cpp)", 537003777,
    "Kakadu Core Error:\n",
    "Cannot write ATK (arbitrary transform kernel) marker segment with\0"
    "lifting steps.  Maximum number of lifting steps is 255.\0"
  },
  {
    "E(params.cpp)", 537003778,
    "Kakadu Core Error:\n",
    "Cannot write ATK (arbitrary transform kernel) marker segment with a non-symmetric wavelet kernel whose Ns or Ls value (see `Ksteps') is greater than 255.\0"
  },
  {
    "E(params.cpp)", 537003779,
    "Kakadu Core Error:\n",
    "Cannot write ATK (arbitrary transform kernel) marker segment with a symmetric wavelet kernel whose Ls value (see `Ksteps') is greater than 510.\0"
  },
  {
    "E(params.cpp)", 537330954,
    "Kakadu Core Error:\n",
    "Unable to write ATK marker segment yet! Some info missing.\0"
  },
  {
    "E(params.cpp)", 554701571,
    "Kakadu Core Error:\n",
    "Attempting to write COD/COC marker segment with too many DWT levels -- max value is 32!\0"
  },
  {
    "E(params.cpp)", 604308738,
    "Kakadu Core Error:\n",
    "Incompatible `DSdfs' and `Cdecomp' values seem to have been created.  Should not be possible.\0"
  },
  {
    "E(threads.cpp)", 2,
    "Kakadu Core Error:\n",
    "You should not explicitly delete a thread queue that was created using `kdu_thread_entity::add_queue'.\0"
  },
  {
    "E(threads.cpp)", 5,
    "Kakadu Core Error:\n",
    "Internal error encountered while trying to access consistent multi-threaded support services from the operating system.  Attempt to signal semaphore failed while other state information suggests that a thread might be blocked on the semaphore!!  Deadlock may ensue.\0"
  },
  {
    "E(threads.cpp)", 285348353,
    "Kakadu Core Error:\n",
    "The `kdu_thread_queue::bind_jobs' function may be used only on working queues -- i.e., those that have been passed to `kdu_thread_entity::attach_queue' and whose `get_max_jobs' function returned a value at least as large as the number of jobs you are trying to bind when the queue was attached to the thread group.  Perhaps you forgot to override `kdu_thread_queue::get_max_jobs' in a derived class??\0"
  },
  {
    "E(threads.cpp)", 285348354,
    "Kakadu Core Error:\n",
    "The `kdu_thread_queue::schedule_jobs' function may be called only from a thread that is participating in the same group to which the queue has been attached.\0"
  },
  {
    "E(threads.cpp)", 302125569,
    "Kakadu Core Error:\n",
    "The `kdu_thread_queue::schedule_job' function may be called only from a thread that is participating in the same group to which the queue has been attached, and whose `get_max_jobs' function returned a non-zero value when the queue was attached to the group.  Perhaps you forgot to override `kdu_thread_queue::get_max_jobs' in a derived class??\0"
  },
  {
    "E(threads.cpp)", 302125570,
    "Kakadu Core Error:\n",
    "The `kdu_thread_queue::schedule_job' function may not be called with the `KDU_THREAD_JOB_REBIND_0' option if any other job binding operation has previously been performed on the same thread queue.\0"
  },
  {
    "E(threads.cpp)", 302125571,
    "Kakadu Core Error:\n",
    "The `kdu_thread_queue::schedule_job' function is being called with the `KDU_THREAD_AUTO_BIND_ONCE' option; however, either another binding operation has previously been performed, or else the number of auto-bind operations requested exceeds the value returned by `kdu_thread_queue::get_max_jobs'.\0"
  },
  {
    "E(threads.cpp)", 302125572,
    "Kakadu Core Error:\n",
    "The `kdu_thread_queue::schedule_job' function is being called with a job that has not yet been bound, yet none of the automatic binding options were specified in the call.\0"
  },
  {
    "E(threads.cpp)", 335614465,
    "Kakadu Core Error:\n",
    "Trying to attach a queue with the `KDU_THREAD_QUEUE_SAFE_CONTEXT' attribute to a thread group that does not have any worker threads.  Safe-context jobs can only be executed by worker threads, so this is not a meaningful thing to do.\0"
  },
  {
    "E(threads.cpp)", 369234433,
    "Kakadu Core Error:\n",
    "Attempting to invoke `kdu_thread_queue::bind_jobs' after the final job for a thread queue has already been scheduled -- as identified by the `all_scheduled' argument in calls to `kdu_thread_queue::schedule_jobs' or `kdu_thread_queue::schedule_job' -- or after the `kdu_thread_queue::all_done' function has been called!\0"
  },
  {
    "E(threads.cpp)", 369234434,
    "Kakadu Core Error:\n",
    "You appear to be invoking `kdu_thread_queue::schedule_jobs' after the queue's final job has already been scheduled!\0"
  },
  {
    "E(threads.cpp)", 369234435,
    "Kakadu Core Error:\n",
    "Attempting to invoke `kdu_thread_queue::schedule_job' after the queue's final job has already been scheduled!\0"
  },
  {
    "E(threads.cpp)", 553783809,
    "Kakadu Core Error:\n",
    "System is entering deadlock!!\0"
  },
  {
    "W(codestream.cpp)", 3,
    "Kakadu Core Warning:\n",
    "Encountered one or more marker codes in the range 0xFF30 to 0xFF3F.  These are to be ignored.\0"
  },
  {
    "W(codestream.cpp)", 4,
    "Kakadu Core Warning:\n",
    "Unrecognized/unimplemented marker code, \0"
    ", found in code-stream.\0"
  },
  {
    "W(codestream.cpp)", 15,
    "Kakadu Core Warning:\n",
    "Dynamic indexing of tile-parts, whether by TLM (tile-part length) marker segments or otherwise, cannot be used by the current implementation when PPM (packed packet header) marker segments are also used.\0"
  },
  {
    "W(codestream.cpp)", 151327232,
    "Kakadu Core Warning:\n",
    "Unable to find modified distortion-length slope thresholds which can satisfy the compressed length constraints imposed by the supplied `Creslength' parameter attribute(s).\0"
  },
  {
    "W(codestream.cpp)", 269551616,
    "Kakadu Core Warning:\n",
    "You cannot currently use the `Creslength' parameter attribute in conjunction with incremental flushing of the codestream.  Ignoring the `Creslength' constraints.\0"
  },
  {
    "W(codestream.cpp)", 269551617,
    "Kakadu Core Warning:\n",
    "You cannot currently use the `Creslength' parameter attribute in conjunction with `kdu_codestream::trans_out' (i.e., you cannot use this parameter to control the compressed lengths of individual resolutions during transcoding).  Ignoring the `Creslength' constraints.\0"
  },
  {
    "W(codestream.cpp)", 336138497,
    "Kakadu Core Warning:\n",
    "You cannot currently use the `Creslength' parameter attribute in conjunction with `kdu_codestream::trans_out' (i.e., you cannot use this parameter to control the compressed lengths of individual resolutions during transcoding).  Ignoring the `Creslength' constraints.\0"
  },
  {
    "W(compressed.cpp)", 17110017,
    "Kakadu Core Warning:\n",
    "Unable to introduce sufficient tile-part interruptions to flush codestream data in the optimal manner.  You are receiving this warning to inform you that you may be able to improve performance by increasing the tile-part interruption limit supplied via the `ORGtpart_interrupts' parameter attribute.\0"
  },
  {
    "W(compressed.cpp)", 285545474,
    "Kakadu Core Warning:\n",
    "Attempting to invoke `kdu_tile::close' on a tile interface that is already closed (or has at least been scheduled for background closure).  It seems that you are keeping invalid tile references around.\0"
  },
  {
    "W(params.cpp)", 6,
    "Kakadu Core Warning:\n",
    "Some absolute step sizes which you have supplied will be ignored, since `Qstep' has been used or a default value for `Qstep' has been forced.  If you want to specify explicit absolute step sizes, you must not use `Qstep' anywhere in the inheritance path of the relevant tile-component.  In practice, this means that you must prevent a default `Qstep' attribute from being synthesized at a higher level in the inheritance path (e.g., at the global level) by using one of the available methods to explicitly specify quantization step sizes -- you can specify a full set, or you can specify a single value and use the efficient `Qderived' option.\0"
  },
  {
    "W(threads.cpp)", 0,
    "Kakadu Core Warning:\n",
    "Attempting to destroy a `kdu_thread_queue' object before waiting for its removal from the thread group to which it is attached -- see `kdu_thread_entity::join' or `kdu_thread_entity::terminate'.\0"
  },
  {
    "W(threads.cpp)", 386208257,
    "Kakadu Core Warning:\n",
    "You appear to be calling `kdu_thread_queue::schedule_jobs' with the `all_scheduled' argument set to true when this has been done before, or else the (even worse) the `kdu_thread_queue::all_done' function has already been invoked!!  This suggests a serious flaw in the implementation, which may result in dangerous race conditions.\0"
  },
  {
    "W(threads.cpp)", 386208258,
    "Kakadu Core Warning:\n",
    "You appear to be calling `kdu_thread_queue::schedule_job' with the `all_scheduled' argument set to true when this has been done before, or else the (even worse) the `kdu_thread_queue::all_done' function has already been invoked!!  This suggests a serious flaw in the implementation, which may result in dangerous race conditions.\0"
  }
};

static bool dev_dummy_val = kdl_register_text(dev_data,204);

#endif // !KDU_EXCLUDE_DEVELOPER_TEXT
