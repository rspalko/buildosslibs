/*****************************************************************************/
// File: x86_stripe_transfer_local.h [scope = APPS/SUPPORT]
// Version: Kakadu, V7.9
// Author: David Taubman
// Last Revised: 8 January, 2017
/*****************************************************************************/
// Copyright 2001, David Taubman, The University of New South Wales (UNSW)
// The copyright owner is Unisearch Ltd, Australia (commercial arm of UNSW)
// Neither this copyright statement, nor the licensing details below
// may be removed from this file or dissociated from its contents.
/*****************************************************************************/
// Licensee: Open Systems Integration; Inc
// License number: 01368
// The licensee has been granted a NON-COMMERCIAL license to the contents of
// this source file.  A brief summary of this license appears below.  This
// summary is not to be relied upon in preference to the full text of the
// license agreement, accepted at purchase of the license.
// 1. The Licensee has the right to install and use the Kakadu software and
//    to develop Applications for the Licensee's own use.
// 2. The Licensee has the right to Deploy Applications built using the
//    Kakadu software to Third Parties, so long as such Deployment does not
//    result in any direct or indirect financial return to the Licensee or
//    any other Third Party, which further supplies or otherwise uses such
//    Applications.
// 3. The Licensee has the right to distribute Reusable Code (including
//    source code and dynamically or statically linked libraries) to a Third
//    Party, provided the Third Party possesses a license to use the Kakadu
//    software, and provided such distribution does not result in any direct
//    or indirect financial return to the Licensee.
/******************************************************************************
Description:
   Finds SIMD implementations to accelerate the conversion and transfer of
data between the line buffers generated by `kdu_multi_synthesis' or
`kdu_multi_analysis' and the (possibly interleaved) application-supplied
sample buffers supplied to `kdu_stripe_decompressor::pull_stripe' or
`kdu_stripe_compressor::push_stripe'.  This file provides macros to
arbitrate the selection of suitable SIMD functions, if they exist, for
x86 processors.  The actual SIMD functions themselves appear within
"ssse3_stripe_transfer.cpp", "avx2_stripe_transfer.cpp" and perhaps other
x86-specific implementation files.
******************************************************************************/
#ifndef X86_STRIPE_TRANSFER_LOCAL_H
#define X86_STRIPE_TRANSFER_LOCAL_H
#include "kdu_arch.h"

namespace kd_supp_simd {
  using namespace kdu_core;

// Safe "static initializer" logic
//-----------------------------------------------------------------------------
#if (!defined KDU_NO_AVX2)
extern void avx2_stripe_transfer_static_init();
static bool avx2_stripe_transfer_static_inited=false;
# define AVX2_STRIPE_TRANSFER_DO_STATIC_INIT() \
if (!avx2_stripe_transfer_static_inited) \
  { if (kdu_mmx_level >= 7) avx2_stripe_transfer_static_init(); \
    avx2_stripe_transfer_static_inited=true; }
#else // No compilation support for AVX2
# define AVX2_STRIPE_TRANSFER_DO_STATIC_INIT() /* Nothing to do */
#endif
//-----------------------------------------------------------------------------
#if (!defined KDU_NO_SSSE3)
extern void ssse3_stripe_transfer_static_init();
static bool ssse3_stripe_transfer_static_inited=false;
# define SSSE3_STRIPE_TRANSFER_DO_STATIC_INIT() \
if (!ssse3_stripe_transfer_static_inited) \
{ if (kdu_mmx_level >= 4) ssse3_stripe_transfer_static_init(); \
  ssse3_stripe_transfer_static_inited=true; }
#else // No compilation support for AVX2
# define SSSE3_STRIPE_TRANSFER_DO_STATIC_INIT() /* Nothing to do */
#endif
//-----------------------------------------------------------------------------


/* ========================================================================= */
/*               SIMD functions used by `kdu_stripe_compressor'              */
/* ========================================================================= */

#  define SSSE3_INT16_FROM_UINT8_ILV1(_func,_width)
#  define SSSE3_INT16_FROM_UINT8_ILV3(_func,_width)
#  define SSSE3_INT16_FROM_UINT8_ILV4(_func,_width)

#  define SSSE3_FLOATS_FROM_UINT8_ILV1(_func,_width)
#  define SSSE3_FLOATS_FROM_UINT8_ILV3(_func,_width)
#  define SSSE3_FLOATS_FROM_UINT8_ILV4(_func,_width)

#  define SSSE3_INT16_FROM_INT16_ILV1(_func,_width)
#  define SSSE3_INT32_FROM_INT16_ILV1(_func,_width)
#  define SSSE3_FLOATS_FROM_INT16_ILV1(_func,_width)

#  define SSSE3_FLOATS_FROM_FLOATS_ILV1(_func,_width)
//----------------------------------------------------------------------------
#  define AVX2_INT16_FROM_UINT8_ILV1(_func,_width)
#  define AVX2_INT16_FROM_UINT8_ILV3(_func,_width)
#  define AVX2_INT16_FROM_UINT8_ILV4(_func,_width)

#  define AVX2_FLOATS_FROM_UINT8_ILV1(_func,_width)
#  define AVX2_FLOATS_FROM_UINT8_ILV3(_func,_width)
#  define AVX2_FLOATS_FROM_UINT8_ILV4(_func,_width)

#  define AVX2_INT16_FROM_INT16_ILV1(_func,_width)
#  define AVX2_INT32_FROM_INT16_ILV1(_func,_width)
#  define AVX2_FLOATS_FROM_INT16_ILV1(_func,_width)

#  define AVX2_FLOATS_FROM_FLOATS_ILV1(_func,_width)
//----------------------------------------------------------------------------


#ifndef KDU_NO_SSSE3
//----------------------------------------------------------------------------
extern void ssse3_int16_from_uint8_ilv1(kdu_int16 **, kdu_byte *,
                                        int, int, int, bool, bool);
#undef SSSE3_INT16_FROM_UINT8_ILV1
#define SSSE3_INT16_FROM_UINT8_ILV1(_func,_width) \
  if ((kdu_mmx_level >= 4) && (_width > 16)) \
    _func = (kdsc_simd_transfer_func) ssse3_int16_from_uint8_ilv1
//----------------------------------------------------------------------------
extern void ssse3_int16_from_uint8_ilv3(kdu_int16 **, kdu_byte *,
                                        int, int, int, bool, bool);
#undef SSSE3_INT16_FROM_UINT8_ILV3
#define SSSE3_INT16_FROM_UINT8_ILV3(_func,_width) \
  if ((kdu_mmx_level >= 4) && (_width > 16)) \
    _func = (kdsc_simd_transfer_func) ssse3_int16_from_uint8_ilv3
//----------------------------------------------------------------------------
extern void ssse3_int16_from_uint8_ilv4(kdu_int16 **, kdu_byte *,
                                        int, int, int, bool, bool);
#undef SSSE3_INT16_FROM_UINT8_ILV4
#define SSSE3_INT16_FROM_UINT8_ILV4(_func,_width) \
  if ((kdu_mmx_level >= 4) && (_width > 16)) \
    _func = (kdsc_simd_transfer_func) ssse3_int16_from_uint8_ilv4
//----------------------------------------------------------------------------
extern void ssse3_floats_from_uint8_ilv1(float **, kdu_byte *,
                                            int, int, int, bool, bool);
#undef SSSE3_FLOATS_FROM_UINT8_ILV1
#define SSSE3_FLOATS_FROM_UINT8_ILV1(_func,_width) \
  if ((kdu_mmx_level >= 4) && (_width > 16)) \
    _func = (kdsc_simd_transfer_func) ssse3_floats_from_uint8_ilv1
//----------------------------------------------------------------------------
extern void ssse3_floats_from_uint8_ilv3(float **, kdu_byte *,
                                         int, int, int, bool, bool);
#undef SSSE3_FLOATS_FROM_UINT8_ILV3
#define SSSE3_FLOATS_FROM_UINT8_ILV3(_func,_width) \
  if ((kdu_mmx_level >= 4) && (_width > 16)) \
    _func = (kdsc_simd_transfer_func) ssse3_floats_from_uint8_ilv3
//----------------------------------------------------------------------------
extern void ssse3_floats_from_uint8_ilv4(float **, kdu_byte *,
                                         int, int, int, bool, bool);
#undef SSSE3_FLOATS_FROM_UINT8_ILV4
#define SSSE3_FLOATS_FROM_UINT8_ILV4(_func,_width) \
  if ((kdu_mmx_level >= 4) && (_width > 16)) \
    _func = (kdsc_simd_transfer_func) ssse3_floats_from_uint8_ilv4
//----------------------------------------------------------------------------
extern void ssse3_int16_from_int16_ilv1(kdu_int16 **, kdu_int16 *,
                                        int, int, int, bool, bool);
#undef SSSE3_INT16_FROM_INT16_ILV1
#define SSSE3_INT16_FROM_INT16_ILV1(_func,_width) \
  if ((kdu_mmx_level >= 4) && (_width > 8)) \
    _func = (kdsc_simd_transfer_func) ssse3_int16_from_int16_ilv1
//----------------------------------------------------------------------------
extern void ssse3_int32_from_int16_ilv1(kdu_int32 **, kdu_int16 *,
                                        int, int, int, bool, bool);
#undef SSSE3_INT32_FROM_INT16_ILV1
#define SSSE3_INT32_FROM_INT16_ILV1(_func,_width) \
  if ((kdu_mmx_level >= 4) && (_width > 8)) \
    _func = (kdsc_simd_transfer_func) ssse3_int32_from_int16_ilv1
//----------------------------------------------------------------------------
extern void ssse3_floats_from_int16_ilv1(float **, kdu_int16 *,
                                         int, int, int, bool, bool);
#undef SSSE3_FLOATS_FROM_INT16_ILV1
#define SSSE3_FLOATS_FROM_INT16_ILV1(_func,_width) \
  if ((kdu_mmx_level >= 4) && (_width > 8)) \
    _func = (kdsc_simd_transfer_func) ssse3_floats_from_int16_ilv1
//----------------------------------------------------------------------------
extern void ssse3_floats_from_floats_ilv1(float **, float *,
                                          int, int, int, bool, bool);
#undef SSSE3_FLOATS_FROM_FLOATS_ILV1
#define SSSE3_FLOATS_FROM_FLOATS_ILV1(_func,_width) \
  if ((kdu_mmx_level >= 4) && (_width > 8)) \
    _func = (kdsc_simd_transfer_func) ssse3_floats_from_floats_ilv1
//----------------------------------------------------------------------------
#endif // !KDU_NO_SSSE3


#ifndef KDU_NO_AVX2
//----------------------------------------------------------------------------
extern void avx2_int16_from_uint8_ilv1(kdu_int16 **, kdu_byte *,
                                       int, int, int, bool, bool);
#undef AVX2_INT16_FROM_UINT8_ILV1
#define AVX2_INT16_FROM_UINT8_ILV1(_func,_width) \
  if ((kdu_mmx_level >= 7) && (_width > 32)) \
    _func = (kdsc_simd_transfer_func)avx2_int16_from_uint8_ilv1
//----------------------------------------------------------------------------
extern void avx2_int16_from_uint8_ilv3(kdu_int16 **, kdu_byte *,
                                       int, int, int, bool, bool);
#undef AVX2_INT16_FROM_UINT8_ILV3
#define AVX2_INT16_FROM_UINT8_ILV3(_func,_width) \
  if ((kdu_mmx_level >= 7) && (_width > 32)) \
    _func = (kdsc_simd_transfer_func)avx2_int16_from_uint8_ilv3
//----------------------------------------------------------------------------
extern void avx2_int16_from_uint8_ilv4(kdu_int16 **, kdu_byte *,
                                       int, int, int, bool, bool);
#undef AVX2_INT16_FROM_UINT8_ILV4
#define AVX2_INT16_FROM_UINT8_ILV4(_func,_width) \
  if ((kdu_mmx_level >= 7) && (_width > 32)) \
    _func = (kdsc_simd_transfer_func)avx2_int16_from_uint8_ilv4
//----------------------------------------------------------------------------
extern void avx2_floats_from_uint8_ilv1(float **, kdu_byte *,
                                        int, int, int, bool, bool);
#undef AVX2_FLOATS_FROM_UINT8_ILV1
#define AVX2_FLOATS_FROM_UINT8_ILV1(_func,_width) \
  if ((kdu_mmx_level >= 7) && (_width > 32)) \
    _func = (kdsc_simd_transfer_func)avx2_floats_from_uint8_ilv1
//----------------------------------------------------------------------------
extern void avx2_floats_from_uint8_ilv3(float **, kdu_byte *,
                                        int, int, int, bool, bool);
#undef AVX2_FLOATS_FROM_UINT8_ILV3
#define AVX2_FLOATS_FROM_UINT8_ILV3(_func,_width) \
  if ((kdu_mmx_level >= 7) && (_width > 32)) \
    _func = (kdsc_simd_transfer_func)avx2_floats_from_uint8_ilv3
//----------------------------------------------------------------------------
extern void avx2_floats_from_uint8_ilv4(float **, kdu_byte *,
                                        int, int, int, bool, bool);
#undef AVX2_FLOATS_FROM_UINT8_ILV4
#define AVX2_FLOATS_FROM_UINT8_ILV4(_func,_width) \
  if ((kdu_mmx_level >= 7) && (_width > 32)) \
    _func = (kdsc_simd_transfer_func)avx2_floats_from_uint8_ilv4
//----------------------------------------------------------------------------
extern void avx2_int16_from_int16_ilv1(kdu_int16 **, kdu_int16 *,
                                       int, int, int, bool, bool);
#undef AVX2_INT16_FROM_INT16_ILV1
#define AVX2_INT16_FROM_INT16_ILV1(_func,_width) \
  if ((kdu_mmx_level >= 7) && (_width > 32)) \
    _func = (kdsc_simd_transfer_func)avx2_int16_from_int16_ilv1
//----------------------------------------------------------------------------
extern void avx2_int32_from_int16_ilv1(kdu_int32 **, kdu_int16 *,
                                       int, int, int, bool, bool);
#undef AVX2_INT32_FROM_INT16_ILV1
#define AVX2_INT32_FROM_INT16_ILV1(_func,_width) \
  if ((kdu_mmx_level >= 7) && (_width > 32)) \
    _func = (kdsc_simd_transfer_func)avx2_int32_from_int16_ilv1
//----------------------------------------------------------------------------
extern void avx2_floats_from_int16_ilv1(float **, kdu_int16 *,
                                        int, int, int, bool, bool);
#undef AVX2_FLOATS_FROM_INT16_ILV1
#define AVX2_FLOATS_FROM_INT16_ILV1(_func,_width) \
  if ((kdu_mmx_level >= 7) && (_width > 32)) \
    _func = (kdsc_simd_transfer_func)avx2_floats_from_int16_ilv1
//----------------------------------------------------------------------------
extern void avx2_floats_from_floats_ilv1(float **, float *,
                                         int, int, int, bool, bool);
#undef AVX2_FLOATS_FROM_FLOATS_ILV1
#define AVX2_FLOATS_FROM_FLOATS_ILV1(_func,_width) \
  if ((kdu_mmx_level >= 7) && (_width > 32)) \
    _func = (kdsc_simd_transfer_func)avx2_floats_from_floats_ilv1
//----------------------------------------------------------------------------
#endif // !KDU_NO_AVX2


#define KDSC_FIND_SIMD_TRANSFER_FUNC(_func, _buf_type, _shorts, \
                      _sample_gap, _width, _prec, _tgt_prec, _absolute) \
  /* NB: last 4 args are identical to those passed to the transfer func. */ \
  { \
    SSSE3_STRIPE_TRANSFER_DO_STATIC_INIT() \
    AVX2_STRIPE_TRANSFER_DO_STATIC_INIT() \
    _func = NULL; /* Until proven otherwise. */ \
    if (_sample_gap == 1) \
      { \
        if (_buf_type == KDSC_BUF8) \
          { \
            if (_shorts) \
              { /* Convert fixed point or reversible ints to bytes. */ \
                SSSE3_INT16_FROM_UINT8_ILV1(_func,_width); \
                AVX2_INT16_FROM_UINT8_ILV1(_func,_width); \
              } \
            else if (!_absolute) \
              { /* Convert floating point to bytes. */ \
                SSSE3_FLOATS_FROM_UINT8_ILV1(_func,_width); \
                AVX2_FLOATS_FROM_UINT8_ILV1(_func,_width); \
              } \
          } \
        else if (_buf_type == KDSC_BUF16) \
          { \
            if (_shorts) \
              { /* Convert words to words, allowing left or right shifts. */ \
                SSSE3_INT16_FROM_INT16_ILV1(_func,_width); \
                AVX2_INT16_FROM_INT16_ILV1(_func,_width); \
              } \
            else if (!_absolute) \
              { /* Convert floating point to words. */ \
                SSSE3_FLOATS_FROM_INT16_ILV1(_func,_width); \
                AVX2_FLOATS_FROM_INT16_ILV1(_func,_width); \
              } \
            else \
              { /* Convert 32-bit ints to words, with possible rightshift. */ \
                SSSE3_INT32_FROM_INT16_ILV1(_func,_width); \
                AVX2_INT32_FROM_INT16_ILV1(_func,_width); \
              } \
          } \
        else if (_buf_type == KDSC_BUF_FLOAT) \
          { \
            if (!_absolute) \
              SSSE3_FLOATS_FROM_FLOATS_ILV1(_func,_width); \
              AVX2_FLOATS_FROM_FLOATS_ILV1(_func,_width); \
          } \
      } \
    else if (_sample_gap == 3) \
      { \
        if (_buf_type == KDSC_BUF8) \
          { \
            if (_shorts) \
              { /* Convert fixed point or reversible ints to bytes. */ \
                SSSE3_INT16_FROM_UINT8_ILV3(_func,_width); \
                AVX2_INT16_FROM_UINT8_ILV3(_func,_width); \
              } \
            else if (!_absolute) \
             { /* Convert floating point to bytes. */ \
               SSSE3_FLOATS_FROM_UINT8_ILV3(_func,_width); \
               AVX2_FLOATS_FROM_UINT8_ILV3(_func,_width); \
             } \
          } \
      } \
    else if (_sample_gap == 4) \
      { \
        if (_buf_type == KDSC_BUF8) \
          { \
            if (_shorts) \
              { /* Convert fixed point or reversible ints to bytes. */ \
                SSSE3_INT16_FROM_UINT8_ILV4(_func,_width); \
                AVX2_INT16_FROM_UINT8_ILV4(_func,_width); \
              } \
            else if (!_absolute) \
             { /* Convert floating point to bytes. */ \
               SSSE3_FLOATS_FROM_UINT8_ILV4(_func,_width); \
               AVX2_FLOATS_FROM_UINT8_ILV4(_func,_width); \
             } \
          } \
      } \
  }


/* ========================================================================= */
/*              SIMD functions used by `kdu_stripe_decompressor'             */
/* ========================================================================= */

#  define SSSE3_INT16_TO_UINT8_RS_ILV1(_func,_width)
#  define SSSE3_INT16_TO_UINT8_RS_ILV3(_func,_width)
#  define SSSE3_INT16_TO_UINT8_RS_ILV4(_func,_width)

#  define SSSE3_FLOATS_TO_UINT8_ILV1(_func,_width)
#  define SSSE3_FLOATS_TO_UINT8_ILV3(_func,_width)
#  define SSSE3_FLOATS_TO_UINT8_ILV4(_func,_width)

#  define SSSE3_INT16_TO_INT16_ILV1(_func,_width)
#  define SSSE3_INT32_TO_INT16_RS_ILV1(_func,_width)
#  define SSSE3_FLOATS_TO_INT16_ILV1(_func,_width)

#  define SSSE3_FLOATS_TO_FLOATS_ILV1(_func,_width)
//----------------------------------------------------------------------------
#  define AVX2_INT16_TO_UINT8_RS_ILV1(_func,_width)
#  define AVX2_INT16_TO_UINT8_RS_ILV3(_func,_width)
#  define AVX2_INT16_TO_UINT8_RS_ILV4(_func,_width)

#  define AVX2_FLOATS_TO_UINT8_ILV1(_func,_width)
#  define AVX2_FLOATS_TO_UINT8_ILV3(_func,_width)
#  define AVX2_FLOATS_TO_UINT8_ILV4(_func,_width)

#  define AVX2_INT16_TO_INT16_ILV1(_func,_width)
#  define AVX2_INT32_TO_INT16_RS_ILV1(_func,_width)
#  define AVX2_FLOATS_TO_INT16_ILV1(_func,_width)

#  define AVX2_FLOATS_TO_FLOATS_ILV1(_func,_width)
//----------------------------------------------------------------------------

#ifndef KDU_NO_SSSE3
//----------------------------------------------------------------------------
extern void ssse3_int16_to_uint8_rs_ilv1(kdu_byte *, kdu_int16 **,
                                         int, int, int, bool, bool, int);
#undef SSSE3_INT16_TO_UINT8_RS_ILV1
#define SSSE3_INT16_TO_UINT8_RS_ILV1(_func,_width) \
  if ((kdu_mmx_level >= 4) && (_width > 16)) \
    _func = (kdsd_simd_transfer_func) ssse3_int16_to_uint8_rs_ilv1
//----------------------------------------------------------------------------
extern void ssse3_int16_to_uint8_rs_ilv3(kdu_byte *, kdu_int16 **,
                                         int, int, int, bool, bool, int);
#undef SSSE3_INT16_TO_UINT8_RS_ILV3
#define SSSE3_INT16_TO_UINT8_RS_ILV3(_func,_width) \
  if ((kdu_mmx_level >= 4) && (_width > 16)) \
    _func = (kdsd_simd_transfer_func) ssse3_int16_to_uint8_rs_ilv3
//----------------------------------------------------------------------------
extern void ssse3_int16_to_uint8_rs_ilv4(kdu_byte *, kdu_int16 **,
                                         int, int, int, bool, bool, int);
#undef SSSE3_INT16_TO_UINT8_RS_ILV4
#define SSSE3_INT16_TO_UINT8_RS_ILV4(_func,_width) \
  if ((kdu_mmx_level >= 4) && (_width > 16)) \
    _func = (kdsd_simd_transfer_func) ssse3_int16_to_uint8_rs_ilv4
//----------------------------------------------------------------------------
extern void ssse3_floats_to_uint8_ilv1(kdu_byte *, float **,
                                       int, int, int, bool, bool, int);
#undef SSSE3_FLOATS_TO_UINT8_ILV1
#define SSSE3_FLOATS_TO_UINT8_ILV1(_func,_width) \
  if ((kdu_mmx_level >= 4) && (_width > 16)) \
    _func = (kdsd_simd_transfer_func) ssse3_floats_to_uint8_ilv1
//----------------------------------------------------------------------------
extern void ssse3_floats_to_uint8_ilv3(kdu_byte *, float **,
                                       int, int, int, bool, bool, int);
#undef SSSE3_FLOATS_TO_UINT8_ILV3
#define SSSE3_FLOATS_TO_UINT8_ILV3(_func,_width) \
  if ((kdu_mmx_level >= 4) && (_width > 16)) \
    _func = (kdsd_simd_transfer_func) ssse3_floats_to_uint8_ilv3
//----------------------------------------------------------------------------
extern void ssse3_floats_to_uint8_ilv4(kdu_byte *, float **,
                                       int, int, int, bool, bool, int);
#undef SSSE3_FLOATS_TO_UINT8_ILV4
#define SSSE3_FLOATS_TO_UINT8_ILV4(_func,_width) \
  if ((kdu_mmx_level >= 4) && (_width > 16)) \
    _func = (kdsd_simd_transfer_func) ssse3_floats_to_uint8_ilv4
//----------------------------------------------------------------------------
extern void ssse3_int16_to_int16_ilv1(kdu_int16 *, kdu_int16 **,
                                      int, int, int, bool, bool, int);
#undef SSSE3_INT16_TO_INT16_ILV1
#define SSSE3_INT16_TO_INT16_ILV1(_func,_width) \
  if ((kdu_mmx_level >= 4) && (_width > 8)) \
    _func = (kdsd_simd_transfer_func) ssse3_int16_to_int16_ilv1
//----------------------------------------------------------------------------
extern void ssse3_int32_to_int16_rs_ilv1(kdu_int16 *, kdu_int32 **,
                                         int, int, int, bool, bool, int);
#undef SSSE3_INT32_TO_INT16_RS_ILV1
#define SSSE3_INT32_TO_INT16_RS_ILV1(_func,_width) \
  if ((kdu_mmx_level >= 4) && (_width > 8)) \
    _func = (kdsd_simd_transfer_func) ssse3_int32_to_int16_rs_ilv1
//----------------------------------------------------------------------------
extern void ssse3_floats_to_int16_ilv1(kdu_int16 *, float **,
                                       int, int, int, bool, bool, int);
#undef SSSE3_FLOATS_TO_INT16_ILV1
#define SSSE3_FLOATS_TO_INT16_ILV1(_func,_width) \
  if ((kdu_mmx_level >= 4) && (_width > 8)) \
    _func = (kdsd_simd_transfer_func) ssse3_floats_to_int16_ilv1
//----------------------------------------------------------------------------
extern void ssse3_floats_to_floats_ilv1(float *, float **,
                                        int, int, int, bool, bool, int);
#undef SSSE3_FLOATS_TO_FLOATS_ILV1
#define SSSE3_FLOATS_TO_FLOATS_ILV1(_func,_width) \
  if ((kdu_mmx_level >= 4) && (_width > 8)) \
    _func = (kdsd_simd_transfer_func) ssse3_floats_to_floats_ilv1
//----------------------------------------------------------------------------
#endif // !KDU_NO_SSSE3

#ifndef KDU_NO_AVX2
//----------------------------------------------------------------------------
extern void avx2_int16_to_uint8_rs_ilv1(kdu_byte *, kdu_int16 **,
                                        int, int, int, bool, bool, int);
#undef AVX2_INT16_TO_UINT8_RS_ILV1
#define AVX2_INT16_TO_UINT8_RS_ILV1(_func,_width) \
  if ((kdu_mmx_level >= 7) && (_width > 32)) \
    _func = (kdsd_simd_transfer_func) avx2_int16_to_uint8_rs_ilv1
//----------------------------------------------------------------------------
extern void avx2_int16_to_uint8_rs_ilv3(kdu_byte *, kdu_int16 **,
                                        int, int, int, bool, bool, int);
#undef AVX2_INT16_TO_UINT8_RS_ILV3
#define AVX2_INT16_TO_UINT8_RS_ILV3(_func,_width) \
  if ((kdu_mmx_level >= 7) && (_width > 32)) \
    _func = (kdsd_simd_transfer_func) avx2_int16_to_uint8_rs_ilv3
//----------------------------------------------------------------------------
extern void avx2_int16_to_uint8_rs_ilv4(kdu_byte *, kdu_int16 **,
                                        int, int, int, bool, bool, int);
#undef AVX2_INT16_TO_UINT8_RS_ILV4
#define AVX2_INT16_TO_UINT8_RS_ILV4(_func,_width) \
  if ((kdu_mmx_level >= 7) && (_width > 32)) \
    _func = (kdsd_simd_transfer_func) avx2_int16_to_uint8_rs_ilv4
//----------------------------------------------------------------------------
extern void avx2_floats_to_uint8_ilv1(kdu_byte *, float **,
                                      int, int, int, bool, bool, int);
#undef AVX2_FLOATS_TO_UINT8_ILV1
#define AVX2_FLOATS_TO_UINT8_ILV1(_func,_width) \
  if ((kdu_mmx_level >= 7) && (_width > 32)) \
    _func = (kdsd_simd_transfer_func) avx2_floats_to_uint8_ilv1
//----------------------------------------------------------------------------
extern void avx2_floats_to_uint8_ilv3(kdu_byte *, float **,
                                      int, int, int, bool, bool, int);
#undef AVX2_FLOATS_TO_UINT8_ILV3
#define AVX2_FLOATS_TO_UINT8_ILV3(_func,_width) \
  if ((kdu_mmx_level >= 7) && (_width > 32)) \
    _func = (kdsd_simd_transfer_func) avx2_floats_to_uint8_ilv3
//----------------------------------------------------------------------------
extern void avx2_floats_to_uint8_ilv4(kdu_byte *, float **,
                                       int, int, int, bool, bool, int);
#undef AVX2_FLOATS_TO_UINT8_ILV4
#define AVX2_FLOATS_TO_UINT8_ILV4(_func,_width) \
  if ((kdu_mmx_level >= 7) && (_width > 32)) \
    _func = (kdsd_simd_transfer_func) avx2_floats_to_uint8_ilv4
//----------------------------------------------------------------------------
extern void avx2_int16_to_int16_ilv1(kdu_int16 *, kdu_int16 **,
                                     int, int, int, bool, bool, int);
#undef AVX2_INT16_TO_INT16_ILV1
#define AVX2_INT16_TO_INT16_ILV1(_func,_width) \
  if ((kdu_mmx_level >= 7) && (_width > 32)) \
    _func = (kdsd_simd_transfer_func) avx2_int16_to_int16_ilv1
//----------------------------------------------------------------------------
extern void avx2_int32_to_int16_rs_ilv1(kdu_int16 *, kdu_int32 **,
                                        int, int, int, bool, bool, int);
#undef AVX2_INT32_TO_INT16_RS_ILV1
#define AVX2_INT32_TO_INT16_RS_ILV1(_func,_width) \
  if ((kdu_mmx_level >= 7) && (_width > 32)) \
    _func = (kdsd_simd_transfer_func) avx2_int32_to_int16_rs_ilv1
//----------------------------------------------------------------------------
extern void avx2_floats_to_int16_ilv1(kdu_int16 *, float **,
                                      int, int, int, bool, bool, int);
#undef AVX2_FLOATS_TO_INT16_ILV1
#define AVX2_FLOATS_TO_INT16_ILV1(_func,_width) \
  if ((kdu_mmx_level >= 7) && (_width > 32)) \
    _func = (kdsd_simd_transfer_func) avx2_floats_to_int16_ilv1
//----------------------------------------------------------------------------
extern void avx2_floats_to_floats_ilv1(float *, float **,
                                        int, int, int, bool, bool, int);
#undef AVX2_FLOATS_TO_FLOATS_ILV1
#define AVX2_FLOATS_TO_FLOATS_ILV1(_func,_width) \
  if ((kdu_mmx_level >= 7) && (_width > 32)) \
    _func = (kdsd_simd_transfer_func) avx2_floats_to_floats_ilv1
//----------------------------------------------------------------------------
#endif // !KDU_NO_AVX2


#define KDSD_FIND_SIMD_TRANSFER_FUNC(_func, _buf_type, _shorts, \
                       _sample_gap, _width, _prec, _orig_prec, _absolute) \
  /* NB: last 4 args are identical to those passed to the transfer func. */ \
  { \
    SSSE3_STRIPE_TRANSFER_DO_STATIC_INIT() \
    AVX2_STRIPE_TRANSFER_DO_STATIC_INIT() \
    _func = NULL; /* Until proven otherwise. */ \
    if (_sample_gap == 1) \
      { \
        if (_buf_type == KDSD_BUF8) \
          { \
            if (_shorts) \
              { /* Convert fixed point or reversible ints to bytes. */ \
                if ((!_absolute) || ((_orig_prec<16) && (_orig_prec>=_prec))) \
                  { /* Conversion involves at most downshifts. */ \
                    SSSE3_INT16_TO_UINT8_RS_ILV1(_func,_width); \
                    AVX2_INT16_TO_UINT8_RS_ILV1(_func,_width); \
                  } \
              } \
            else if (!_absolute) \
              { /* Convert floating point to bytes. */ \
                SSSE3_FLOATS_TO_UINT8_ILV1(_func,_width); \
                AVX2_FLOATS_TO_UINT8_ILV1(_func,_width); \
              } \
          } \
        else if (_buf_type == KDSD_BUF16) \
          { \
            if (_shorts) \
              { /* Convert words to words, allowing left or right shifts. */ \
                if ((!_absolute) || (_orig_prec < 16)) \
                  SSSE3_INT16_TO_INT16_ILV1(_func,_width); \
                  AVX2_INT16_TO_INT16_ILV1(_func,_width); \
              } \
            else if (!_absolute) \
              { /* Convert floating point to words. */ \
                SSSE3_FLOATS_TO_INT16_ILV1(_func,_width); \
                AVX2_FLOATS_TO_INT16_ILV1(_func,_width); \
              } \
            else if (_orig_prec >= _prec) \
              { /* Convert 32-bit ints to words, with possible rightshift. */ \
                SSSE3_INT32_TO_INT16_RS_ILV1(_func,_width); \
                AVX2_INT32_TO_INT16_RS_ILV1(_func,_width); \
              } \
          } \
        else if (_buf_type == KDSD_BUF_FLOAT) \
          { \
            if (!_absolute) \
              { \
                SSSE3_FLOATS_TO_FLOATS_ILV1(_func,_width); \
                AVX2_FLOATS_TO_FLOATS_ILV1(_func,_width); \
              } \
          } \
      } \
    else if (_sample_gap == 3) \
      { \
        if (_buf_type == KDSD_BUF8) \
          { \
            if (_shorts) \
              { /* Convert fixed point or reversible ints to bytes. */ \
                if ((!_absolute) || ((_orig_prec<16) && (_orig_prec>=_prec))) \
                  { /* Conversion involves at most rightshifts. */ \
                    SSSE3_INT16_TO_UINT8_RS_ILV3(_func,_width); \
                    AVX2_INT16_TO_UINT8_RS_ILV3(_func,_width); \
                  } \
              } \
            else if (!_absolute) \
             { /* Convert floating point to bytes. */ \
               SSSE3_FLOATS_TO_UINT8_ILV3(_func,_width); \
               AVX2_FLOATS_TO_UINT8_ILV3(_func,_width); \
             } \
          } \
      } \
    else if (_sample_gap == 4) \
      { \
        if (_buf_type == KDSD_BUF8) \
          { \
            if (_shorts) \
              { /* Convert fixed point or reversible ints to bytes. */ \
                if ((!_absolute) || ((_orig_prec<16) && (_orig_prec>=_prec))) \
                  { /* Conversion involves at most rightshifts. */ \
                    SSSE3_INT16_TO_UINT8_RS_ILV4(_func,_width); \
                    AVX2_INT16_TO_UINT8_RS_ILV4(_func,_width); \
                  } \
              } \
            else if (!_absolute) \
             { /* Convert floating point to bytes. */ \
               SSSE3_FLOATS_TO_UINT8_ILV4(_func,_width); \
               AVX2_FLOATS_TO_UINT8_ILV4(_func,_width); \
             } \
          } \
      } \
  }
  
} // namespace kd_supp_simd

#endif // X86_STRIPE_TRANSFER_LOCAL_H
